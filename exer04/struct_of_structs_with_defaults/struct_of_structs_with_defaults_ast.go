// Code generated by goadlc v3 - DO NOT EDIT.
package struct_of_structs_with_defaults

import (
	goadl "github.com/adl-lang/goadl_rt/v3"
	"github.com/adl-lang/goadl_rt/v3/customtypes"
	"github.com/adl-lang/goadl_rt/v3/sys/adlast"
	"github.com/adl-lang/goadl_rt/v3/sys/types"
)

func Texpr_Bar() goadl.ATypeExpr[Bar] {
	return goadl.ATypeExpr[Bar]{
		Value: adlast.TypeExpr{
			TypeRef: adlast.TypeRef{
				Branch: adlast.TypeRef_Reference{
					V: adlast.ScopedName{
						ModuleName: "exer04.struct_of_structs_with_defaults",
						Name:       "Bar",
					},
				},
			},
			Parameters: []adlast.TypeExpr{},
		},
	}
}

func AST_Bar() adlast.ScopedDecl {
	decl := adlast.Decl{
		Name: "Bar",
		Version: types.Maybe[uint32]{
			Branch: types.Maybe_Nothing{
				V: struct{}{}},
		},
		Type_: adlast.DeclType{
			Branch: adlast.DeclType_Struct_{
				V: adlast.Struct{
					TypeParams: []adlast.Ident{},
					Fields: []adlast.Field{
						adlast.Field{
							Name:           "d",
							SerializedName: "d",
							TypeExpr: adlast.TypeExpr{
								TypeRef: adlast.TypeRef{
									Branch: adlast.TypeRef_Primitive{
										V: "String"},
								},
								Parameters: []adlast.TypeExpr{},
							},
							Default: types.Maybe[any]{
								Branch: types.Maybe_Just[any]{
									V: "doe a deer"},
							},
							Annotations: customtypes.MapMap[adlast.ScopedName, any]{},
						},
						adlast.Field{
							Name:           "svb",
							SerializedName: "svb",
							TypeExpr: adlast.TypeExpr{
								TypeRef: adlast.TypeRef{
									Branch: adlast.TypeRef_Primitive{
										V: "StringMap"},
								},
								Parameters: []adlast.TypeExpr{
									adlast.TypeExpr{
										TypeRef: adlast.TypeRef{
											Branch: adlast.TypeRef_Primitive{
												V: "Vector"},
										},
										Parameters: []adlast.TypeExpr{
											adlast.TypeExpr{
												TypeRef: adlast.TypeRef{
													Branch: adlast.TypeRef_Primitive{
														V: "Bool"},
												},
												Parameters: []adlast.TypeExpr{},
											},
										},
									},
								},
							},
							Default: types.Maybe[any]{
								Branch: types.Maybe_Just[any]{
									V: map[string]interface{}{"a": []interface{}{true, false}, "b": []interface{}{false, true}}},
							},
							Annotations: customtypes.MapMap[adlast.ScopedName, any]{},
						},
					},
				}},
		},
		Annotations: customtypes.MapMap[adlast.ScopedName, any]{},
	}
	return adlast.ScopedDecl{
		ModuleName: "exer04.struct_of_structs_with_defaults",
		Decl:       decl,
	}
}

func init() {
	goadl.RESOLVER.Register(
		adlast.ScopedName{ModuleName: "exer04.struct_of_structs_with_defaults", Name: "Bar"},
		AST_Bar(),
	)
}

func Texpr_Fizz() goadl.ATypeExpr[Fizz] {
	return goadl.ATypeExpr[Fizz]{
		Value: adlast.TypeExpr{
			TypeRef: adlast.TypeRef{
				Branch: adlast.TypeRef_Reference{
					V: adlast.ScopedName{
						ModuleName: "exer04.struct_of_structs_with_defaults",
						Name:       "Fizz",
					},
				},
			},
			Parameters: []adlast.TypeExpr{},
		},
	}
}

func AST_Fizz() adlast.ScopedDecl {
	decl := adlast.Decl{
		Name: "Fizz",
		Version: types.Maybe[uint32]{
			Branch: types.Maybe_Nothing{
				V: struct{}{}},
		},
		Type_: adlast.DeclType{
			Branch: adlast.DeclType_Struct_{
				V: adlast.Struct{
					TypeParams: []adlast.Ident{},
					Fields: []adlast.Field{
						adlast.Field{
							Name:           "A",
							SerializedName: "A",
							TypeExpr: adlast.TypeExpr{
								TypeRef: adlast.TypeRef{
									Branch: adlast.TypeRef_Reference{
										V: adlast.ScopedName{
											ModuleName: "exer04.struct_of_structs_with_defaults",
											Name:       "Foo",
										}},
								},
								Parameters: []adlast.TypeExpr{},
							},
							Default: types.Maybe[any]{
								Branch: types.Maybe_Nothing{
									V: struct{}{}},
							},
							Annotations: customtypes.MapMap[adlast.ScopedName, any]{},
						},
						adlast.Field{
							Name:           "B",
							SerializedName: "B",
							TypeExpr: adlast.TypeExpr{
								TypeRef: adlast.TypeRef{
									Branch: adlast.TypeRef_Reference{
										V: adlast.ScopedName{
											ModuleName: "exer04.struct_of_structs_with_defaults",
											Name:       "Bar",
										}},
								},
								Parameters: []adlast.TypeExpr{},
							},
							Default: types.Maybe[any]{
								Branch: types.Maybe_Nothing{
									V: struct{}{}},
							},
							Annotations: customtypes.MapMap[adlast.ScopedName, any]{},
						},
					},
				}},
		},
		Annotations: customtypes.MapMap[adlast.ScopedName, any]{},
	}
	return adlast.ScopedDecl{
		ModuleName: "exer04.struct_of_structs_with_defaults",
		Decl:       decl,
	}
}

func init() {
	goadl.RESOLVER.Register(
		adlast.ScopedName{ModuleName: "exer04.struct_of_structs_with_defaults", Name: "Fizz"},
		AST_Fizz(),
	)
}

func Texpr_Foo() goadl.ATypeExpr[Foo] {
	return goadl.ATypeExpr[Foo]{
		Value: adlast.TypeExpr{
			TypeRef: adlast.TypeRef{
				Branch: adlast.TypeRef_Reference{
					V: adlast.ScopedName{
						ModuleName: "exer04.struct_of_structs_with_defaults",
						Name:       "Foo",
					},
				},
			},
			Parameters: []adlast.TypeExpr{},
		},
	}
}

func AST_Foo() adlast.ScopedDecl {
	decl := adlast.Decl{
		Name: "Foo",
		Version: types.Maybe[uint32]{
			Branch: types.Maybe_Nothing{
				V: struct{}{}},
		},
		Type_: adlast.DeclType{
			Branch: adlast.DeclType_Struct_{
				V: adlast.Struct{
					TypeParams: []adlast.Ident{},
					Fields: []adlast.Field{
						adlast.Field{
							Name:           "d",
							SerializedName: "d",
							TypeExpr: adlast.TypeExpr{
								TypeRef: adlast.TypeRef{
									Branch: adlast.TypeRef_Primitive{
										V: "Int32"},
								},
								Parameters: []adlast.TypeExpr{},
							},
							Default: types.Maybe[any]{
								Branch: types.Maybe_Just[any]{
									V: 1},
							},
							Annotations: customtypes.MapMap[adlast.ScopedName, any]{},
						},
					},
				}},
		},
		Annotations: customtypes.MapMap[adlast.ScopedName, any]{},
	}
	return adlast.ScopedDecl{
		ModuleName: "exer04.struct_of_structs_with_defaults",
		Decl:       decl,
	}
}

func init() {
	goadl.RESOLVER.Register(
		adlast.ScopedName{ModuleName: "exer04.struct_of_structs_with_defaults", Name: "Foo"},
		AST_Foo(),
	)
}

func Texpr_NT() goadl.ATypeExpr[NT] {
	return goadl.ATypeExpr[NT]{
		Value: adlast.TypeExpr{
			TypeRef: adlast.TypeRef{
				Branch: adlast.TypeRef_Reference{
					V: adlast.ScopedName{
						ModuleName: "exer04.struct_of_structs_with_defaults",
						Name:       "NT",
					},
				},
			},
			Parameters: []adlast.TypeExpr{},
		},
	}
}

func AST_NT() adlast.ScopedDecl {
	decl := adlast.Decl{
		Name: "NT",
		Version: types.Maybe[uint32]{
			Branch: types.Maybe_Nothing{
				V: struct{}{}},
		},
		Type_: adlast.DeclType{
			Branch: adlast.DeclType_Newtype_{
				V: adlast.NewType{
					TypeParams: []adlast.Ident{},
					TypeExpr: adlast.TypeExpr{
						TypeRef: adlast.TypeRef{
							Branch: adlast.TypeRef_Reference{
								V: adlast.ScopedName{
									ModuleName: "exer04.struct_of_structs_with_defaults",
									Name:       "StructOfStruct",
								}},
						},
						Parameters: []adlast.TypeExpr{},
					},
					Default: types.Maybe[any]{
						Branch: types.Maybe_Nothing{
							V: struct{}{}},
					},
				}},
		},
		Annotations: customtypes.MapMap[adlast.ScopedName, any]{},
	}
	return adlast.ScopedDecl{
		ModuleName: "exer04.struct_of_structs_with_defaults",
		Decl:       decl,
	}
}

func init() {
	goadl.RESOLVER.Register(
		adlast.ScopedName{ModuleName: "exer04.struct_of_structs_with_defaults", Name: "NT"},
		AST_NT(),
	)
}

func Texpr_StructOfStruct() goadl.ATypeExpr[StructOfStruct] {
	return goadl.ATypeExpr[StructOfStruct]{
		Value: adlast.TypeExpr{
			TypeRef: adlast.TypeRef{
				Branch: adlast.TypeRef_Reference{
					V: adlast.ScopedName{
						ModuleName: "exer04.struct_of_structs_with_defaults",
						Name:       "StructOfStruct",
					},
				},
			},
			Parameters: []adlast.TypeExpr{},
		},
	}
}

func AST_StructOfStruct() adlast.ScopedDecl {
	decl := adlast.Decl{
		Name: "StructOfStruct",
		Version: types.Maybe[uint32]{
			Branch: types.Maybe_Nothing{
				V: struct{}{}},
		},
		Type_: adlast.DeclType{
			Branch: adlast.DeclType_Struct_{
				V: adlast.Struct{
					TypeParams: []adlast.Ident{},
					Fields: []adlast.Field{
						adlast.Field{
							Name:           "A",
							SerializedName: "A",
							TypeExpr: adlast.TypeExpr{
								TypeRef: adlast.TypeRef{
									Branch: adlast.TypeRef_Reference{
										V: adlast.ScopedName{
											ModuleName: "exer04.struct_of_structs_with_defaults",
											Name:       "Foo",
										}},
								},
								Parameters: []adlast.TypeExpr{},
							},
							Default: types.Maybe[any]{
								Branch: types.Maybe_Nothing{
									V: struct{}{}},
							},
							Annotations: customtypes.MapMap[adlast.ScopedName, any]{},
						},
						adlast.Field{
							Name:           "B",
							SerializedName: "B",
							TypeExpr: adlast.TypeExpr{
								TypeRef: adlast.TypeRef{
									Branch: adlast.TypeRef_Reference{
										V: adlast.ScopedName{
											ModuleName: "exer04.struct_of_structs_with_defaults",
											Name:       "Bar",
										}},
								},
								Parameters: []adlast.TypeExpr{},
							},
							Default: types.Maybe[any]{
								Branch: types.Maybe_Nothing{
									V: struct{}{}},
							},
							Annotations: customtypes.MapMap[adlast.ScopedName, any]{},
						},
						adlast.Field{
							Name:           "c",
							SerializedName: "c",
							TypeExpr: adlast.TypeExpr{
								TypeRef: adlast.TypeRef{
									Branch: adlast.TypeRef_Reference{
										V: adlast.ScopedName{
											ModuleName: "exer04.struct_of_structs_with_defaults",
											Name:       "Fizz",
										}},
								},
								Parameters: []adlast.TypeExpr{},
							},
							Default: types.Maybe[any]{
								Branch: types.Maybe_Nothing{
									V: struct{}{}},
							},
							Annotations: customtypes.MapMap[adlast.ScopedName, any]{},
						},
					},
				}},
		},
		Annotations: customtypes.MapMap[adlast.ScopedName, any]{},
	}
	return adlast.ScopedDecl{
		ModuleName: "exer04.struct_of_structs_with_defaults",
		Decl:       decl,
	}
}

func init() {
	goadl.RESOLVER.Register(
		adlast.ScopedName{ModuleName: "exer04.struct_of_structs_with_defaults", Name: "StructOfStruct"},
		AST_StructOfStruct(),
	)
}
