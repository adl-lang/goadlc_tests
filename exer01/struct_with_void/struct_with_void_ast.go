// Code generated by goadlc v3 - DO NOT EDIT.
package struct_with_void

import (
	goadl "github.com/adl-lang/goadl_rt/v3"
	"github.com/adl-lang/goadl_rt/v3/customtypes"
	"github.com/adl-lang/goadl_rt/v3/sys/adlast"
	"github.com/adl-lang/goadl_rt/v3/sys/types"
)

func Texpr_StructB[X any](x goadl.ATypeExpr[X]) goadl.ATypeExpr[StructB[X]] {
	return goadl.ATypeExpr[StructB[X]]{
		Value: adlast.TypeExpr{
			TypeRef: adlast.TypeRef{
				Branch: adlast.TypeRef_Reference{
					V: adlast.ScopedName{
						ModuleName: "exer01.struct_with_void",
						Name:       "StructB",
					},
				},
			},
			Parameters: []adlast.TypeExpr{x.Value},
		},
	}
}

func AST_StructB() adlast.ScopedDecl {
	decl := adlast.Decl{
		Name: "StructB",
		Version: types.Maybe[uint32]{
			Branch: types.Maybe_Nothing{
				V: struct{}{}},
		},
		Type_: adlast.DeclType{
			Branch: adlast.DeclType_Struct_{
				V: adlast.Struct{
					TypeParams: []adlast.Ident{
						"X",
					},
					Fields: []adlast.Field{
						adlast.Field{
							Name:           "B",
							SerializedName: "B",
							TypeExpr: adlast.TypeExpr{
								TypeRef: adlast.TypeRef{
									Branch: adlast.TypeRef_Primitive{
										V: "Void"},
								},
								Parameters: []adlast.TypeExpr{},
							},
							Default: types.Maybe[any]{
								Branch: types.Maybe_Nothing{
									V: struct{}{}},
							},
							Annotations: customtypes.MapMap[adlast.ScopedName, any]{},
						},
					},
				}},
		},
		Annotations: customtypes.MapMap[adlast.ScopedName, any]{},
	}
	return adlast.ScopedDecl{
		ModuleName: "exer01.struct_with_void",
		Decl:       decl,
	}
}

func init() {
	goadl.RESOLVER.Register(
		adlast.ScopedName{ModuleName: "exer01.struct_with_void", Name: "StructB"},
		AST_StructB(),
	)
}

func Texpr_StructC() goadl.ATypeExpr[StructC] {
	return goadl.ATypeExpr[StructC]{
		Value: adlast.TypeExpr{
			TypeRef: adlast.TypeRef{
				Branch: adlast.TypeRef_Reference{
					V: adlast.ScopedName{
						ModuleName: "exer01.struct_with_void",
						Name:       "StructC",
					},
				},
			},
			Parameters: []adlast.TypeExpr{},
		},
	}
}

func AST_StructC() adlast.ScopedDecl {
	decl := adlast.Decl{
		Name: "StructC",
		Version: types.Maybe[uint32]{
			Branch: types.Maybe_Nothing{
				V: struct{}{}},
		},
		Type_: adlast.DeclType{
			Branch: adlast.DeclType_Type_{
				V: adlast.TypeDef{
					TypeParams: []adlast.Ident{},
					TypeExpr: adlast.TypeExpr{
						TypeRef: adlast.TypeRef{
							Branch: adlast.TypeRef_Reference{
								V: adlast.ScopedName{
									ModuleName: "exer01.struct_with_void",
									Name:       "StructOf",
								}},
						},
						Parameters: []adlast.TypeExpr{},
					},
				}},
		},
		Annotations: customtypes.MapMap[adlast.ScopedName, any]{},
	}
	return adlast.ScopedDecl{
		ModuleName: "exer01.struct_with_void",
		Decl:       decl,
	}
}

func init() {
	goadl.RESOLVER.Register(
		adlast.ScopedName{ModuleName: "exer01.struct_with_void", Name: "StructC"},
		AST_StructC(),
	)
}

func Texpr_StructOf() goadl.ATypeExpr[StructOf] {
	return goadl.ATypeExpr[StructOf]{
		Value: adlast.TypeExpr{
			TypeRef: adlast.TypeRef{
				Branch: adlast.TypeRef_Reference{
					V: adlast.ScopedName{
						ModuleName: "exer01.struct_with_void",
						Name:       "StructOf",
					},
				},
			},
			Parameters: []adlast.TypeExpr{},
		},
	}
}

func AST_StructOf() adlast.ScopedDecl {
	decl := adlast.Decl{
		Name: "StructOf",
		Version: types.Maybe[uint32]{
			Branch: types.Maybe_Nothing{
				V: struct{}{}},
		},
		Type_: adlast.DeclType{
			Branch: adlast.DeclType_Struct_{
				V: adlast.Struct{
					TypeParams: []adlast.Ident{},
					Fields: []adlast.Field{
						adlast.Field{
							Name:           "A",
							SerializedName: "A",
							TypeExpr: adlast.TypeExpr{
								TypeRef: adlast.TypeRef{
									Branch: adlast.TypeRef_Primitive{
										V: "Void"},
								},
								Parameters: []adlast.TypeExpr{},
							},
							Default: types.Maybe[any]{
								Branch: types.Maybe_Nothing{
									V: struct{}{}},
							},
							Annotations: customtypes.MapMap[adlast.ScopedName, any]{},
						},
					},
				}},
		},
		Annotations: customtypes.MapMap[adlast.ScopedName, any]{},
	}
	return adlast.ScopedDecl{
		ModuleName: "exer01.struct_with_void",
		Decl:       decl,
	}
}

func init() {
	goadl.RESOLVER.Register(
		adlast.ScopedName{ModuleName: "exer01.struct_with_void", Name: "StructOf"},
		AST_StructOf(),
	)
}
