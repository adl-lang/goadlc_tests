// Code generated by goadlc v3 - DO NOT EDIT.
package cyoa

import (
	goadl "github.com/adl-lang/goadl_rt/v3"
	"github.com/adl-lang/goadl_rt/v3/customtypes"
	"github.com/adl-lang/goadl_rt/v3/sys/adlast"
	"github.com/adl-lang/goadl_rt/v3/sys/types"
)

func Texpr_ChoiceThree[A any, B any, C any](a goadl.ATypeExpr[A], b goadl.ATypeExpr[B], c goadl.ATypeExpr[C]) goadl.ATypeExpr[ChoiceThree[A, B, C]] {
	return goadl.ATypeExpr[ChoiceThree[A, B, C]]{
		Value: adlast.TypeExpr{
			TypeRef: adlast.TypeRef{
				Branch: adlast.TypeRef_Reference{
					V: adlast.ScopedName{
						ModuleName: "cyoa",
						Name:       "ChoiceThree",
					},
				},
			},
			Parameters: []adlast.TypeExpr{a.Value, b.Value, c.Value},
		},
	}
}

func AST_ChoiceThree() adlast.ScopedDecl {
	decl := adlast.Decl{
		Name: "ChoiceThree",
		Version: types.Maybe[uint32]{
			Branch: types.Maybe_Nothing{
				V: struct{}{}},
		},
		Type_: adlast.DeclType{
			Branch: adlast.DeclType_Union_{
				V: adlast.Union{
					TypeParams: []adlast.Ident{
						"A",
						"B",
						"C",
					},
					Fields: []adlast.Field{
						adlast.Field{
							Name:           "one",
							SerializedName: "one",
							TypeExpr: adlast.TypeExpr{
								TypeRef: adlast.TypeRef{
									Branch: adlast.TypeRef_TypeParam{
										V: "A"},
								},
								Parameters: []adlast.TypeExpr{},
							},
							Default: types.Maybe[any]{
								Branch: types.Maybe_Nothing{
									V: struct{}{}},
							},
							Annotations: customtypes.MapMap[adlast.ScopedName, any]{},
						},
						adlast.Field{
							Name:           "two",
							SerializedName: "two",
							TypeExpr: adlast.TypeExpr{
								TypeRef: adlast.TypeRef{
									Branch: adlast.TypeRef_TypeParam{
										V: "B"},
								},
								Parameters: []adlast.TypeExpr{},
							},
							Default: types.Maybe[any]{
								Branch: types.Maybe_Nothing{
									V: struct{}{}},
							},
							Annotations: customtypes.MapMap[adlast.ScopedName, any]{},
						},
						adlast.Field{
							Name:           "tri",
							SerializedName: "tri",
							TypeExpr: adlast.TypeExpr{
								TypeRef: adlast.TypeRef{
									Branch: adlast.TypeRef_TypeParam{
										V: "C"},
								},
								Parameters: []adlast.TypeExpr{},
							},
							Default: types.Maybe[any]{
								Branch: types.Maybe_Nothing{
									V: struct{}{}},
							},
							Annotations: customtypes.MapMap[adlast.ScopedName, any]{},
						},
					},
				}},
		},
		Annotations: customtypes.MapMap[adlast.ScopedName, any]{},
	}
	return adlast.ScopedDecl{
		ModuleName: "cyoa",
		Decl:       decl,
	}
}

func init() {
	goadl.RESOLVER.Register(
		adlast.ScopedName{ModuleName: "cyoa", Name: "ChoiceThree"},
		AST_ChoiceThree(),
	)
}

func Texpr_ChoiceTwo[A any, B any](a goadl.ATypeExpr[A], b goadl.ATypeExpr[B]) goadl.ATypeExpr[ChoiceTwo[A, B]] {
	return goadl.ATypeExpr[ChoiceTwo[A, B]]{
		Value: adlast.TypeExpr{
			TypeRef: adlast.TypeRef{
				Branch: adlast.TypeRef_Reference{
					V: adlast.ScopedName{
						ModuleName: "cyoa",
						Name:       "ChoiceTwo",
					},
				},
			},
			Parameters: []adlast.TypeExpr{a.Value, b.Value},
		},
	}
}

func AST_ChoiceTwo() adlast.ScopedDecl {
	decl := adlast.Decl{
		Name: "ChoiceTwo",
		Version: types.Maybe[uint32]{
			Branch: types.Maybe_Nothing{
				V: struct{}{}},
		},
		Type_: adlast.DeclType{
			Branch: adlast.DeclType_Union_{
				V: adlast.Union{
					TypeParams: []adlast.Ident{
						"A",
						"B",
					},
					Fields: []adlast.Field{
						adlast.Field{
							Name:           "one",
							SerializedName: "one",
							TypeExpr: adlast.TypeExpr{
								TypeRef: adlast.TypeRef{
									Branch: adlast.TypeRef_TypeParam{
										V: "A"},
								},
								Parameters: []adlast.TypeExpr{},
							},
							Default: types.Maybe[any]{
								Branch: types.Maybe_Nothing{
									V: struct{}{}},
							},
							Annotations: customtypes.MapMap[adlast.ScopedName, any]{},
						},
						adlast.Field{
							Name:           "two",
							SerializedName: "two",
							TypeExpr: adlast.TypeExpr{
								TypeRef: adlast.TypeRef{
									Branch: adlast.TypeRef_TypeParam{
										V: "B"},
								},
								Parameters: []adlast.TypeExpr{},
							},
							Default: types.Maybe[any]{
								Branch: types.Maybe_Nothing{
									V: struct{}{}},
							},
							Annotations: customtypes.MapMap[adlast.ScopedName, any]{},
						},
					},
				}},
		},
		Annotations: customtypes.MapMap[adlast.ScopedName, any]{},
	}
	return adlast.ScopedDecl{
		ModuleName: "cyoa",
		Decl:       decl,
	}
}

func init() {
	goadl.RESOLVER.Register(
		adlast.ScopedName{ModuleName: "cyoa", Name: "ChoiceTwo"},
		AST_ChoiceTwo(),
	)
}

func Texpr_Page[A any, B any, C any](a goadl.ATypeExpr[A], b goadl.ATypeExpr[B], c goadl.ATypeExpr[C]) goadl.ATypeExpr[Page[A, B, C]] {
	return goadl.ATypeExpr[Page[A, B, C]]{
		Value: adlast.TypeExpr{
			TypeRef: adlast.TypeRef{
				Branch: adlast.TypeRef_Reference{
					V: adlast.ScopedName{
						ModuleName: "cyoa",
						Name:       "Page",
					},
				},
			},
			Parameters: []adlast.TypeExpr{a.Value, b.Value, c.Value},
		},
	}
}

func AST_Page() adlast.ScopedDecl {
	decl := adlast.Decl{
		Name: "Page",
		Version: types.Maybe[uint32]{
			Branch: types.Maybe_Nothing{
				V: struct{}{}},
		},
		Type_: adlast.DeclType{
			Branch: adlast.DeclType_Union_{
				V: adlast.Union{
					TypeParams: []adlast.Ident{
						"A",
						"B",
						"C",
					},
					Fields: []adlast.Field{
						adlast.Field{
							Name:           "next_page",
							SerializedName: "next_page",
							TypeExpr: adlast.TypeExpr{
								TypeRef: adlast.TypeRef{
									Branch: adlast.TypeRef_Primitive{
										V: "Void"},
								},
								Parameters: []adlast.TypeExpr{},
							},
							Default: types.Maybe[any]{
								Branch: types.Maybe_Nothing{
									V: struct{}{}},
							},
							Annotations: customtypes.MapMap[adlast.ScopedName, any]{},
						},
						adlast.Field{
							Name:           "two",
							SerializedName: "two",
							TypeExpr: adlast.TypeExpr{
								TypeRef: adlast.TypeRef{
									Branch: adlast.TypeRef_Reference{
										V: adlast.ScopedName{
											ModuleName: "cyoa",
											Name:       "ChoiceTwo",
										}},
								},
								Parameters: []adlast.TypeExpr{
									adlast.TypeExpr{
										TypeRef: adlast.TypeRef{
											Branch: adlast.TypeRef_TypeParam{
												V: "A"},
										},
										Parameters: []adlast.TypeExpr{},
									},
									adlast.TypeExpr{
										TypeRef: adlast.TypeRef{
											Branch: adlast.TypeRef_TypeParam{
												V: "B"},
										},
										Parameters: []adlast.TypeExpr{},
									},
								},
							},
							Default: types.Maybe[any]{
								Branch: types.Maybe_Nothing{
									V: struct{}{}},
							},
							Annotations: customtypes.MapMap[adlast.ScopedName, any]{},
						},
						adlast.Field{
							Name:           "tri",
							SerializedName: "tri",
							TypeExpr: adlast.TypeExpr{
								TypeRef: adlast.TypeRef{
									Branch: adlast.TypeRef_Reference{
										V: adlast.ScopedName{
											ModuleName: "cyoa",
											Name:       "ChoiceThree",
										}},
								},
								Parameters: []adlast.TypeExpr{
									adlast.TypeExpr{
										TypeRef: adlast.TypeRef{
											Branch: adlast.TypeRef_TypeParam{
												V: "A"},
										},
										Parameters: []adlast.TypeExpr{},
									},
									adlast.TypeExpr{
										TypeRef: adlast.TypeRef{
											Branch: adlast.TypeRef_TypeParam{
												V: "B"},
										},
										Parameters: []adlast.TypeExpr{},
									},
									adlast.TypeExpr{
										TypeRef: adlast.TypeRef{
											Branch: adlast.TypeRef_TypeParam{
												V: "C"},
										},
										Parameters: []adlast.TypeExpr{},
									},
								},
							},
							Default: types.Maybe[any]{
								Branch: types.Maybe_Nothing{
									V: struct{}{}},
							},
							Annotations: customtypes.MapMap[adlast.ScopedName, any]{},
						},
					},
				}},
		},
		Annotations: customtypes.MapMap[adlast.ScopedName, any]{},
	}
	return adlast.ScopedDecl{
		ModuleName: "cyoa",
		Decl:       decl,
	}
}

func init() {
	goadl.RESOLVER.Register(
		adlast.ScopedName{ModuleName: "cyoa", Name: "Page"},
		AST_Page(),
	)
}
