// Code generated by goadlc v3 - DO NOT EDIT.
package cyoa

import (
	goadl "github.com/adl-lang/goadl_rt/v3"
	"github.com/adl-lang/goadl_rt/v3/customtypes"
	"github.com/adl-lang/goadl_rt/v3/sys/adlast"
	"github.com/adl-lang/goadl_rt/v3/sys/types"
)

func Texpr_ChoiceThree[A any, B any, C any](a adlast.ATypeExpr[A], b adlast.ATypeExpr[B], c adlast.ATypeExpr[C]) adlast.ATypeExpr[ChoiceThree[A, B, C]] {
	te := adlast.Make_TypeExpr(
		adlast.Make_TypeRef_reference(
			adlast.Make_ScopedName("cyoa", "ChoiceThree"),
		),
		[]adlast.TypeExpr{a.Value, b.Value, c.Value},
	)
	return adlast.Make_ATypeExpr[ChoiceThree[A, B, C]](te)
}

func AST_ChoiceThree() adlast.ScopedDecl {
	decl := adlast.MakeAll_Decl(
		"ChoiceThree",
		types.Make_Maybe_nothing[uint32](),
		adlast.Make_DeclType_union_(
			adlast.MakeAll_Union(
				[]adlast.Ident{
					"A",
					"B",
					"C",
				},
				[]adlast.Field{
					adlast.MakeAll_Field(
						"one",
						"one",
						adlast.MakeAll_TypeExpr(
							adlast.Make_TypeRef_typeParam(
								"A",
							),
							[]adlast.TypeExpr{},
						),
						types.Make_Maybe_nothing[any](),
						customtypes.MapMap[adlast.ScopedName, any]{},
					),
					adlast.MakeAll_Field(
						"two",
						"two",
						adlast.MakeAll_TypeExpr(
							adlast.Make_TypeRef_typeParam(
								"B",
							),
							[]adlast.TypeExpr{},
						),
						types.Make_Maybe_nothing[any](),
						customtypes.MapMap[adlast.ScopedName, any]{},
					),
					adlast.MakeAll_Field(
						"tri",
						"tri",
						adlast.MakeAll_TypeExpr(
							adlast.Make_TypeRef_typeParam(
								"C",
							),
							[]adlast.TypeExpr{},
						),
						types.Make_Maybe_nothing[any](),
						customtypes.MapMap[adlast.ScopedName, any]{},
					),
				},
			),
		),
		customtypes.MapMap[adlast.ScopedName, any]{},
	)
	return adlast.Make_ScopedDecl("cyoa", decl)
}

func init() {
	goadl.RESOLVER.Register(
		adlast.Make_ScopedName("cyoa", "ChoiceThree"),
		AST_ChoiceThree(),
	)
}

func Texpr_ChoiceTwo[A any, B any](a adlast.ATypeExpr[A], b adlast.ATypeExpr[B]) adlast.ATypeExpr[ChoiceTwo[A, B]] {
	te := adlast.Make_TypeExpr(
		adlast.Make_TypeRef_reference(
			adlast.Make_ScopedName("cyoa", "ChoiceTwo"),
		),
		[]adlast.TypeExpr{a.Value, b.Value},
	)
	return adlast.Make_ATypeExpr[ChoiceTwo[A, B]](te)
}

func AST_ChoiceTwo() adlast.ScopedDecl {
	decl := adlast.MakeAll_Decl(
		"ChoiceTwo",
		types.Make_Maybe_nothing[uint32](),
		adlast.Make_DeclType_union_(
			adlast.MakeAll_Union(
				[]adlast.Ident{
					"A",
					"B",
				},
				[]adlast.Field{
					adlast.MakeAll_Field(
						"one",
						"one",
						adlast.MakeAll_TypeExpr(
							adlast.Make_TypeRef_typeParam(
								"A",
							),
							[]adlast.TypeExpr{},
						),
						types.Make_Maybe_nothing[any](),
						customtypes.MapMap[adlast.ScopedName, any]{},
					),
					adlast.MakeAll_Field(
						"two",
						"two",
						adlast.MakeAll_TypeExpr(
							adlast.Make_TypeRef_typeParam(
								"B",
							),
							[]adlast.TypeExpr{},
						),
						types.Make_Maybe_nothing[any](),
						customtypes.MapMap[adlast.ScopedName, any]{},
					),
				},
			),
		),
		customtypes.MapMap[adlast.ScopedName, any]{},
	)
	return adlast.Make_ScopedDecl("cyoa", decl)
}

func init() {
	goadl.RESOLVER.Register(
		adlast.Make_ScopedName("cyoa", "ChoiceTwo"),
		AST_ChoiceTwo(),
	)
}

func Texpr_Page[A any, B any, C any](a adlast.ATypeExpr[A], b adlast.ATypeExpr[B], c adlast.ATypeExpr[C]) adlast.ATypeExpr[Page[A, B, C]] {
	te := adlast.Make_TypeExpr(
		adlast.Make_TypeRef_reference(
			adlast.Make_ScopedName("cyoa", "Page"),
		),
		[]adlast.TypeExpr{a.Value, b.Value, c.Value},
	)
	return adlast.Make_ATypeExpr[Page[A, B, C]](te)
}

func AST_Page() adlast.ScopedDecl {
	decl := adlast.MakeAll_Decl(
		"Page",
		types.Make_Maybe_nothing[uint32](),
		adlast.Make_DeclType_union_(
			adlast.MakeAll_Union(
				[]adlast.Ident{
					"A",
					"B",
					"C",
				},
				[]adlast.Field{
					adlast.MakeAll_Field(
						"next_page",
						"next_page",
						adlast.MakeAll_TypeExpr(
							adlast.Make_TypeRef_primitive(
								"Void",
							),
							[]adlast.TypeExpr{},
						),
						types.Make_Maybe_nothing[any](),
						customtypes.MapMap[adlast.ScopedName, any]{},
					),
					adlast.MakeAll_Field(
						"two",
						"two",
						adlast.MakeAll_TypeExpr(
							adlast.Make_TypeRef_reference(
								adlast.MakeAll_ScopedName(
									"cyoa",
									"ChoiceTwo",
								),
							),
							[]adlast.TypeExpr{
								adlast.MakeAll_TypeExpr(
									adlast.Make_TypeRef_typeParam(
										"A",
									),
									[]adlast.TypeExpr{},
								),
								adlast.MakeAll_TypeExpr(
									adlast.Make_TypeRef_typeParam(
										"B",
									),
									[]adlast.TypeExpr{},
								),
							},
						),
						types.Make_Maybe_nothing[any](),
						customtypes.MapMap[adlast.ScopedName, any]{},
					),
					adlast.MakeAll_Field(
						"tri",
						"tri",
						adlast.MakeAll_TypeExpr(
							adlast.Make_TypeRef_reference(
								adlast.MakeAll_ScopedName(
									"cyoa",
									"ChoiceThree",
								),
							),
							[]adlast.TypeExpr{
								adlast.MakeAll_TypeExpr(
									adlast.Make_TypeRef_typeParam(
										"A",
									),
									[]adlast.TypeExpr{},
								),
								adlast.MakeAll_TypeExpr(
									adlast.Make_TypeRef_typeParam(
										"B",
									),
									[]adlast.TypeExpr{},
								),
								adlast.MakeAll_TypeExpr(
									adlast.Make_TypeRef_typeParam(
										"C",
									),
									[]adlast.TypeExpr{},
								),
							},
						),
						types.Make_Maybe_nothing[any](),
						customtypes.MapMap[adlast.ScopedName, any]{},
					),
				},
			),
		),
		customtypes.MapMap[adlast.ScopedName, any]{},
	)
	return adlast.Make_ScopedDecl("cyoa", decl)
}

func init() {
	goadl.RESOLVER.Register(
		adlast.Make_ScopedName("cyoa", "Page"),
		AST_Page(),
	)
}
