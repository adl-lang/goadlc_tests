// Code generated by goadlc v3 - DO NOT EDIT.
package struct_of_structs

import (
	goadl "github.com/adl-lang/goadl_rt/v3"
	"github.com/adl-lang/goadl_rt/v3/customtypes"
	"github.com/adl-lang/goadl_rt/v3/sys/adlast"
	"github.com/adl-lang/goadl_rt/v3/sys/types"
)

func Texpr_Bar() adlast.ATypeExpr[Bar] {
	te := adlast.Make_TypeExpr(
		adlast.Make_TypeRef_reference(
			adlast.Make_ScopedName("exer03.struct_of_structs", "Bar"),
		),
		[]adlast.TypeExpr{},
	)
	return adlast.Make_ATypeExpr[Bar](te)
}

func AST_Bar() adlast.ScopedDecl {
	decl := adlast.MakeAll_Decl(
		"Bar",
		types.Make_Maybe_nothing[uint32](),
		adlast.Make_DeclType_struct_(
			adlast.MakeAll_Struct(
				[]adlast.Ident{},
				[]adlast.Field{
					adlast.MakeAll_Field(
						"d",
						"d",
						adlast.MakeAll_TypeExpr(
							adlast.Make_TypeRef_primitive(
								"String",
							),
							[]adlast.TypeExpr{},
						),
						types.Make_Maybe_nothing[any](),
						customtypes.MapMap[adlast.ScopedName, any]{},
					),
				},
			),
		),
		customtypes.MapMap[adlast.ScopedName, any]{},
	)
	return adlast.Make_ScopedDecl("exer03.struct_of_structs", decl)
}

func init() {
	goadl.RESOLVER.Register(
		adlast.Make_ScopedName("exer03.struct_of_structs", "Bar"),
		AST_Bar(),
	)
}

func Texpr_Fizz() adlast.ATypeExpr[Fizz] {
	te := adlast.Make_TypeExpr(
		adlast.Make_TypeRef_reference(
			adlast.Make_ScopedName("exer03.struct_of_structs", "Fizz"),
		),
		[]adlast.TypeExpr{},
	)
	return adlast.Make_ATypeExpr[Fizz](te)
}

func AST_Fizz() adlast.ScopedDecl {
	decl := adlast.MakeAll_Decl(
		"Fizz",
		types.Make_Maybe_nothing[uint32](),
		adlast.Make_DeclType_struct_(
			adlast.MakeAll_Struct(
				[]adlast.Ident{},
				[]adlast.Field{
					adlast.MakeAll_Field(
						"A",
						"A",
						adlast.MakeAll_TypeExpr(
							adlast.Make_TypeRef_reference(
								adlast.MakeAll_ScopedName(
									"exer03.struct_of_structs",
									"Foo",
								),
							),
							[]adlast.TypeExpr{},
						),
						types.Make_Maybe_nothing[any](),
						customtypes.MapMap[adlast.ScopedName, any]{},
					),
					adlast.MakeAll_Field(
						"B",
						"B",
						adlast.MakeAll_TypeExpr(
							adlast.Make_TypeRef_reference(
								adlast.MakeAll_ScopedName(
									"exer03.struct_of_structs",
									"Bar",
								),
							),
							[]adlast.TypeExpr{},
						),
						types.Make_Maybe_nothing[any](),
						customtypes.MapMap[adlast.ScopedName, any]{},
					),
					adlast.MakeAll_Field(
						"c",
						"c",
						adlast.MakeAll_TypeExpr(
							adlast.Make_TypeRef_primitive(
								"Nullable",
							),
							[]adlast.TypeExpr{
								adlast.MakeAll_TypeExpr(
									adlast.Make_TypeRef_reference(
										adlast.MakeAll_ScopedName(
											"exer03.struct_of_structs",
											"Fizz",
										),
									),
									[]adlast.TypeExpr{},
								),
							},
						),
						types.Make_Maybe_nothing[any](),
						customtypes.MapMap[adlast.ScopedName, any]{},
					),
				},
			),
		),
		customtypes.MapMap[adlast.ScopedName, any]{},
	)
	return adlast.Make_ScopedDecl("exer03.struct_of_structs", decl)
}

func init() {
	goadl.RESOLVER.Register(
		adlast.Make_ScopedName("exer03.struct_of_structs", "Fizz"),
		AST_Fizz(),
	)
}

func Texpr_Foo() adlast.ATypeExpr[Foo] {
	te := adlast.Make_TypeExpr(
		adlast.Make_TypeRef_reference(
			adlast.Make_ScopedName("exer03.struct_of_structs", "Foo"),
		),
		[]adlast.TypeExpr{},
	)
	return adlast.Make_ATypeExpr[Foo](te)
}

func AST_Foo() adlast.ScopedDecl {
	decl := adlast.MakeAll_Decl(
		"Foo",
		types.Make_Maybe_nothing[uint32](),
		adlast.Make_DeclType_struct_(
			adlast.MakeAll_Struct(
				[]adlast.Ident{},
				[]adlast.Field{
					adlast.MakeAll_Field(
						"d",
						"d",
						adlast.MakeAll_TypeExpr(
							adlast.Make_TypeRef_primitive(
								"Int32",
							),
							[]adlast.TypeExpr{},
						),
						types.Make_Maybe_nothing[any](),
						customtypes.MapMap[adlast.ScopedName, any]{},
					),
				},
			),
		),
		customtypes.MapMap[adlast.ScopedName, any]{},
	)
	return adlast.Make_ScopedDecl("exer03.struct_of_structs", decl)
}

func init() {
	goadl.RESOLVER.Register(
		adlast.Make_ScopedName("exer03.struct_of_structs", "Foo"),
		AST_Foo(),
	)
}

func Texpr_StructOfStruct() adlast.ATypeExpr[StructOfStruct] {
	te := adlast.Make_TypeExpr(
		adlast.Make_TypeRef_reference(
			adlast.Make_ScopedName("exer03.struct_of_structs", "StructOfStruct"),
		),
		[]adlast.TypeExpr{},
	)
	return adlast.Make_ATypeExpr[StructOfStruct](te)
}

func AST_StructOfStruct() adlast.ScopedDecl {
	decl := adlast.MakeAll_Decl(
		"StructOfStruct",
		types.Make_Maybe_nothing[uint32](),
		adlast.Make_DeclType_struct_(
			adlast.MakeAll_Struct(
				[]adlast.Ident{},
				[]adlast.Field{
					adlast.MakeAll_Field(
						"A",
						"A",
						adlast.MakeAll_TypeExpr(
							adlast.Make_TypeRef_reference(
								adlast.MakeAll_ScopedName(
									"exer03.struct_of_structs",
									"Foo",
								),
							),
							[]adlast.TypeExpr{},
						),
						types.Make_Maybe_nothing[any](),
						customtypes.MapMap[adlast.ScopedName, any]{},
					),
					adlast.MakeAll_Field(
						"B",
						"B",
						adlast.MakeAll_TypeExpr(
							adlast.Make_TypeRef_reference(
								adlast.MakeAll_ScopedName(
									"exer03.struct_of_structs",
									"Bar",
								),
							),
							[]adlast.TypeExpr{},
						),
						types.Make_Maybe_nothing[any](),
						customtypes.MapMap[adlast.ScopedName, any]{},
					),
					adlast.MakeAll_Field(
						"c",
						"c",
						adlast.MakeAll_TypeExpr(
							adlast.Make_TypeRef_reference(
								adlast.MakeAll_ScopedName(
									"exer03.struct_of_structs",
									"Fizz",
								),
							),
							[]adlast.TypeExpr{},
						),
						types.Make_Maybe_nothing[any](),
						customtypes.MapMap[adlast.ScopedName, any]{},
					),
				},
			),
		),
		customtypes.MapMap[adlast.ScopedName, any]{},
	)
	return adlast.Make_ScopedDecl("exer03.struct_of_structs", decl)
}

func init() {
	goadl.RESOLVER.Register(
		adlast.Make_ScopedName("exer03.struct_of_structs", "StructOfStruct"),
		AST_StructOfStruct(),
	)
}
