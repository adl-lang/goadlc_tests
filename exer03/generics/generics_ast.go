// Code generated by goadlc v3 - DO NOT EDIT.
package generics

import (
	goadl "github.com/adl-lang/goadl_rt/v3"
	"github.com/adl-lang/goadl_rt/v3/customtypes"
	"github.com/adl-lang/goadl_rt/v3/sys/adlast"
	"github.com/adl-lang/goadl_rt/v3/sys/types"
)

func Texpr_Abc[A any, B any](a goadl.ATypeExpr[A], b goadl.ATypeExpr[B]) goadl.ATypeExpr[Abc[A, B]] {
	return goadl.ATypeExpr[Abc[A, B]]{
		Value: adlast.TypeExpr{
			TypeRef: adlast.TypeRef{
				Branch: adlast.TypeRef_Reference{
					V: adlast.ScopedName{
						ModuleName: "exer03.generics",
						Name:       "Abc",
					},
				},
			},
			Parameters: []adlast.TypeExpr{a.Value, b.Value},
		},
	}
}

func AST_Abc() adlast.ScopedDecl {
	decl := adlast.Decl{
		Name: "Abc",
		Version: types.Maybe[uint32]{
			Branch: types.Maybe_Nothing{
				V: struct{}{}},
		},
		Type_: adlast.DeclType{
			Branch: adlast.DeclType_Struct_{
				V: adlast.Struct{
					TypeParams: []adlast.Ident{
						"A",
						"B",
					},
					Fields: []adlast.Field{
						adlast.Field{
							Name:           "a",
							SerializedName: "a",
							TypeExpr: adlast.TypeExpr{
								TypeRef: adlast.TypeRef{
									Branch: adlast.TypeRef_TypeParam{
										V: "A"},
								},
								Parameters: []adlast.TypeExpr{},
							},
							Default: types.Maybe[any]{
								Branch: types.Maybe_Nothing{
									V: struct{}{}},
							},
							Annotations: customtypes.MapMap[adlast.ScopedName, any]{},
						},
						adlast.Field{
							Name:           "b",
							SerializedName: "b",
							TypeExpr: adlast.TypeExpr{
								TypeRef: adlast.TypeRef{
									Branch: adlast.TypeRef_Primitive{
										V: "Vector"},
								},
								Parameters: []adlast.TypeExpr{
									adlast.TypeExpr{
										TypeRef: adlast.TypeRef{
											Branch: adlast.TypeRef_TypeParam{
												V: "B"},
										},
										Parameters: []adlast.TypeExpr{},
									},
								},
							},
							Default: types.Maybe[any]{
								Branch: types.Maybe_Nothing{
									V: struct{}{}},
							},
							Annotations: customtypes.MapMap[adlast.ScopedName, any]{},
						},
						adlast.Field{
							Name:           "kids",
							SerializedName: "kids",
							TypeExpr: adlast.TypeExpr{
								TypeRef: adlast.TypeRef{
									Branch: adlast.TypeRef_Primitive{
										V: "Vector"},
								},
								Parameters: []adlast.TypeExpr{
									adlast.TypeExpr{
										TypeRef: adlast.TypeRef{
											Branch: adlast.TypeRef_Reference{
												V: adlast.ScopedName{
													ModuleName: "exer03.generics",
													Name:       "Abc",
												}},
										},
										Parameters: []adlast.TypeExpr{
											adlast.TypeExpr{
												TypeRef: adlast.TypeRef{
													Branch: adlast.TypeRef_TypeParam{
														V: "A"},
												},
												Parameters: []adlast.TypeExpr{},
											},
											adlast.TypeExpr{
												TypeRef: adlast.TypeRef{
													Branch: adlast.TypeRef_TypeParam{
														V: "B"},
												},
												Parameters: []adlast.TypeExpr{},
											},
										},
									},
								},
							},
							Default: types.Maybe[any]{
								Branch: types.Maybe_Just[any]{
									V: []interface{}{}},
							},
							Annotations: customtypes.MapMap[adlast.ScopedName, any]{},
						},
						adlast.Field{
							Name:           "grandkids_named",
							SerializedName: "grandkids_named",
							TypeExpr: adlast.TypeExpr{
								TypeRef: adlast.TypeRef{
									Branch: adlast.TypeRef_Primitive{
										V: "StringMap"},
								},
								Parameters: []adlast.TypeExpr{
									adlast.TypeExpr{
										TypeRef: adlast.TypeRef{
											Branch: adlast.TypeRef_Reference{
												V: adlast.ScopedName{
													ModuleName: "exer03.generics",
													Name:       "Abc",
												}},
										},
										Parameters: []adlast.TypeExpr{
											adlast.TypeExpr{
												TypeRef: adlast.TypeRef{
													Branch: adlast.TypeRef_Primitive{
														V: "Int64"},
												},
												Parameters: []adlast.TypeExpr{},
											},
											adlast.TypeExpr{
												TypeRef: adlast.TypeRef{
													Branch: adlast.TypeRef_Primitive{
														V: "String"},
												},
												Parameters: []adlast.TypeExpr{},
											},
										},
									},
								},
							},
							Default: types.Maybe[any]{
								Branch: types.Maybe_Just[any]{
									V: map[string]interface{}{"fav": map[string]interface{}{"a": 4321, "b": []interface{}{"aaa"}, "c": 99, "d": map[string]interface{}{"d": map[string]interface{}{"a": 22}}, "e": map[string]interface{}{"a": 1234}, "f": interface{}(nil), "grandkids_named": map[string]interface{}{}}}},
							},
							Annotations: customtypes.MapMap[adlast.ScopedName, any]{},
						},
						adlast.Field{
							Name:           "c",
							SerializedName: "c",
							TypeExpr: adlast.TypeExpr{
								TypeRef: adlast.TypeRef{
									Branch: adlast.TypeRef_Primitive{
										V: "Int64"},
								},
								Parameters: []adlast.TypeExpr{},
							},
							Default: types.Maybe[any]{
								Branch: types.Maybe_Just[any]{
									V: 66},
							},
							Annotations: customtypes.MapMap[adlast.ScopedName, any]{},
						},
						adlast.Field{
							Name:           "d",
							SerializedName: "d",
							TypeExpr: adlast.TypeExpr{
								TypeRef: adlast.TypeRef{
									Branch: adlast.TypeRef_Reference{
										V: adlast.ScopedName{
											ModuleName: "exer03.generics",
											Name:       "Def",
										}},
								},
								Parameters: []adlast.TypeExpr{
									adlast.TypeExpr{
										TypeRef: adlast.TypeRef{
											Branch: adlast.TypeRef_TypeParam{
												V: "A"},
										},
										Parameters: []adlast.TypeExpr{},
									},
									adlast.TypeExpr{
										TypeRef: adlast.TypeRef{
											Branch: adlast.TypeRef_TypeParam{
												V: "B"},
										},
										Parameters: []adlast.TypeExpr{},
									},
								},
							},
							Default: types.Maybe[any]{
								Branch: types.Maybe_Nothing{
									V: struct{}{}},
							},
							Annotations: customtypes.MapMap[adlast.ScopedName, any]{},
						},
						adlast.Field{
							Name:           "e",
							SerializedName: "e",
							TypeExpr: adlast.TypeExpr{
								TypeRef: adlast.TypeRef{
									Branch: adlast.TypeRef_Reference{
										V: adlast.ScopedName{
											ModuleName: "exer03.generics",
											Name:       "Def",
										}},
								},
								Parameters: []adlast.TypeExpr{
									adlast.TypeExpr{
										TypeRef: adlast.TypeRef{
											Branch: adlast.TypeRef_Primitive{
												V: "Int64"},
										},
										Parameters: []adlast.TypeExpr{},
									},
									adlast.TypeExpr{
										TypeRef: adlast.TypeRef{
											Branch: adlast.TypeRef_Primitive{
												V: "String"},
										},
										Parameters: []adlast.TypeExpr{},
									},
								},
							},
							Default: types.Maybe[any]{
								Branch: types.Maybe_Just[any]{
									V: map[string]interface{}{"a": 1234}},
							},
							Annotations: customtypes.MapMap[adlast.ScopedName, any]{},
						},
						adlast.Field{
							Name:           "f",
							SerializedName: "f",
							TypeExpr: adlast.TypeExpr{
								TypeRef: adlast.TypeRef{
									Branch: adlast.TypeRef_Primitive{
										V: "Nullable"},
								},
								Parameters: []adlast.TypeExpr{
									adlast.TypeExpr{
										TypeRef: adlast.TypeRef{
											Branch: adlast.TypeRef_Reference{
												V: adlast.ScopedName{
													ModuleName: "exer03.generics",
													Name:       "Abc",
												}},
										},
										Parameters: []adlast.TypeExpr{
											adlast.TypeExpr{
												TypeRef: adlast.TypeRef{
													Branch: adlast.TypeRef_Primitive{
														V: "Int64"},
												},
												Parameters: []adlast.TypeExpr{},
											},
											adlast.TypeExpr{
												TypeRef: adlast.TypeRef{
													Branch: adlast.TypeRef_Primitive{
														V: "String"},
												},
												Parameters: []adlast.TypeExpr{},
											},
										},
									},
								},
							},
							Default: types.Maybe[any]{
								Branch: types.Maybe_Just[any]{
									V: map[string]interface{}{"a": 4321, "b": []interface{}{"aaa"}, "c": 99, "d": map[string]interface{}{"d": map[string]interface{}{"a": 22}}, "e": map[string]interface{}{"a": 1234}, "f": interface{}(nil)}},
							},
							Annotations: customtypes.MapMap[adlast.ScopedName, any]{},
						},
					},
				}},
		},
		Annotations: customtypes.MapMap[adlast.ScopedName, any]{},
	}
	return adlast.ScopedDecl{
		ModuleName: "exer03.generics",
		Decl:       decl,
	}
}

func init() {
	goadl.RESOLVER.Register(
		adlast.ScopedName{ModuleName: "exer03.generics", Name: "Abc"},
		AST_Abc(),
	)
}

func Texpr_Def[A any, B any](a goadl.ATypeExpr[A], b goadl.ATypeExpr[B]) goadl.ATypeExpr[Def[A, B]] {
	return goadl.ATypeExpr[Def[A, B]]{
		Value: adlast.TypeExpr{
			TypeRef: adlast.TypeRef{
				Branch: adlast.TypeRef_Reference{
					V: adlast.ScopedName{
						ModuleName: "exer03.generics",
						Name:       "Def",
					},
				},
			},
			Parameters: []adlast.TypeExpr{a.Value, b.Value},
		},
	}
}

func AST_Def() adlast.ScopedDecl {
	decl := adlast.Decl{
		Name: "Def",
		Version: types.Maybe[uint32]{
			Branch: types.Maybe_Nothing{
				V: struct{}{}},
		},
		Type_: adlast.DeclType{
			Branch: adlast.DeclType_Union_{
				V: adlast.Union{
					TypeParams: []adlast.Ident{
						"A",
						"B",
					},
					Fields: []adlast.Field{
						adlast.Field{
							Name:           "a",
							SerializedName: "a",
							TypeExpr: adlast.TypeExpr{
								TypeRef: adlast.TypeRef{
									Branch: adlast.TypeRef_TypeParam{
										V: "A"},
								},
								Parameters: []adlast.TypeExpr{},
							},
							Default: types.Maybe[any]{
								Branch: types.Maybe_Nothing{
									V: struct{}{}},
							},
							Annotations: customtypes.MapMap[adlast.ScopedName, any]{},
						},
						adlast.Field{
							Name:           "b",
							SerializedName: "b",
							TypeExpr: adlast.TypeExpr{
								TypeRef: adlast.TypeRef{
									Branch: adlast.TypeRef_Primitive{
										V: "Vector"},
								},
								Parameters: []adlast.TypeExpr{
									adlast.TypeExpr{
										TypeRef: adlast.TypeRef{
											Branch: adlast.TypeRef_TypeParam{
												V: "B"},
										},
										Parameters: []adlast.TypeExpr{},
									},
								},
							},
							Default: types.Maybe[any]{
								Branch: types.Maybe_Nothing{
									V: struct{}{}},
							},
							Annotations: customtypes.MapMap[adlast.ScopedName, any]{},
						},
						adlast.Field{
							Name:           "c",
							SerializedName: "c",
							TypeExpr: adlast.TypeExpr{
								TypeRef: adlast.TypeRef{
									Branch: adlast.TypeRef_Primitive{
										V: "Int64"},
								},
								Parameters: []adlast.TypeExpr{},
							},
							Default: types.Maybe[any]{
								Branch: types.Maybe_Nothing{
									V: struct{}{}},
							},
							Annotations: customtypes.MapMap[adlast.ScopedName, any]{},
						},
						adlast.Field{
							Name:           "d",
							SerializedName: "d",
							TypeExpr: adlast.TypeExpr{
								TypeRef: adlast.TypeRef{
									Branch: adlast.TypeRef_Reference{
										V: adlast.ScopedName{
											ModuleName: "exer03.generics",
											Name:       "Def",
										}},
								},
								Parameters: []adlast.TypeExpr{
									adlast.TypeExpr{
										TypeRef: adlast.TypeRef{
											Branch: adlast.TypeRef_TypeParam{
												V: "A"},
										},
										Parameters: []adlast.TypeExpr{},
									},
									adlast.TypeExpr{
										TypeRef: adlast.TypeRef{
											Branch: adlast.TypeRef_TypeParam{
												V: "B"},
										},
										Parameters: []adlast.TypeExpr{},
									},
								},
							},
							Default: types.Maybe[any]{
								Branch: types.Maybe_Nothing{
									V: struct{}{}},
							},
							Annotations: customtypes.MapMap[adlast.ScopedName, any]{},
						},
					},
				}},
		},
		Annotations: customtypes.MapMap[adlast.ScopedName, any]{},
	}
	return adlast.ScopedDecl{
		ModuleName: "exer03.generics",
		Decl:       decl,
	}
}

func init() {
	goadl.RESOLVER.Register(
		adlast.ScopedName{ModuleName: "exer03.generics", Name: "Def"},
		AST_Def(),
	)
}
