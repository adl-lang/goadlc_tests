// Code generated by goadlc v3 - DO NOT EDIT.
package tttest

import (
	goadl "github.com/adl-lang/goadl_rt/v3"
	"github.com/adl-lang/goadl_rt/v3/customtypes"
	"github.com/adl-lang/goadl_rt/v3/sys/adlast"
	"github.com/adl-lang/goadl_rt/v3/sys/types"
)

func Texpr_S1[A any](a adlast.ATypeExpr[A]) adlast.ATypeExpr[S1[A]] {
	te := adlast.Make_TypeExpr(
		adlast.Make_TypeRef_reference(
			adlast.Make_ScopedName("exer06.tttest", "S1"),
		),
		[]adlast.TypeExpr{a.Value},
	)
	return adlast.Make_ATypeExpr[S1[A]](te)
}

func AST_S1() adlast.ScopedDecl {
	decl := adlast.MakeAll_Decl(
		"S1",
		types.Make_Maybe_nothing[uint32](),
		adlast.Make_DeclType_struct_(
			adlast.MakeAll_Struct(
				[]adlast.Ident{
					"A",
				},
				[]adlast.Field{
					adlast.MakeAll_Field(
						"a",
						"a",
						adlast.MakeAll_TypeExpr(
							adlast.Make_TypeRef_primitive(
								"TypeToken",
							),
							[]adlast.TypeExpr{
								adlast.MakeAll_TypeExpr(
									adlast.Make_TypeRef_typeParam(
										"A",
									),
									[]adlast.TypeExpr{},
								),
							},
						),
						types.Make_Maybe_just[any](
							nil,
						),
						customtypes.MapMap[adlast.ScopedName, any]{},
					),
					adlast.MakeAll_Field(
						"b",
						"b",
						adlast.MakeAll_TypeExpr(
							adlast.Make_TypeRef_primitive(
								"Json",
							),
							[]adlast.TypeExpr{},
						),
						types.Make_Maybe_just[any](
							map[string]interface{}{"a": interface{}(nil)},
						),
						customtypes.MapMap[adlast.ScopedName, any]{},
					),
				},
			),
		),
		customtypes.MapMap[adlast.ScopedName, any]{},
	)
	return adlast.Make_ScopedDecl("exer06.tttest", decl)
}

func init() {
	goadl.RESOLVER.Register(
		adlast.Make_ScopedName("exer06.tttest", "S1"),
		AST_S1(),
	)
}

func Texpr_S2[A any](a adlast.ATypeExpr[A]) adlast.ATypeExpr[S2[A]] {
	te := adlast.Make_TypeExpr(
		adlast.Make_TypeRef_reference(
			adlast.Make_ScopedName("exer06.tttest", "S2"),
		),
		[]adlast.TypeExpr{a.Value},
	)
	return adlast.Make_ATypeExpr[S2[A]](te)
}

func AST_S2() adlast.ScopedDecl {
	decl := adlast.MakeAll_Decl(
		"S2",
		types.Make_Maybe_nothing[uint32](),
		adlast.Make_DeclType_struct_(
			adlast.MakeAll_Struct(
				[]adlast.Ident{
					"A",
				},
				[]adlast.Field{
					adlast.MakeAll_Field(
						"a",
						"a",
						adlast.MakeAll_TypeExpr(
							adlast.Make_TypeRef_reference(
								adlast.MakeAll_ScopedName(
									"exer06.tttest",
									"S1",
								),
							),
							[]adlast.TypeExpr{
								adlast.MakeAll_TypeExpr(
									adlast.Make_TypeRef_primitive(
										"String",
									),
									[]adlast.TypeExpr{},
								),
							},
						),
						types.Make_Maybe_nothing[any](),
						customtypes.MapMap[adlast.ScopedName, any]{},
					),
					adlast.MakeAll_Field(
						"b",
						"b",
						adlast.MakeAll_TypeExpr(
							adlast.Make_TypeRef_reference(
								adlast.MakeAll_ScopedName(
									"exer06.tttest",
									"S1",
								),
							),
							[]adlast.TypeExpr{
								adlast.MakeAll_TypeExpr(
									adlast.Make_TypeRef_reference(
										adlast.MakeAll_ScopedName(
											"exer06.tttest",
											"S3",
										),
									),
									[]adlast.TypeExpr{},
								),
							},
						),
						types.Make_Maybe_nothing[any](),
						customtypes.MapMap[adlast.ScopedName, any]{},
					),
					adlast.MakeAll_Field(
						"c",
						"c",
						adlast.MakeAll_TypeExpr(
							adlast.Make_TypeRef_reference(
								adlast.MakeAll_ScopedName(
									"exer06.tttest",
									"S1",
								),
							),
							[]adlast.TypeExpr{
								adlast.MakeAll_TypeExpr(
									adlast.Make_TypeRef_primitive(
										"Vector",
									),
									[]adlast.TypeExpr{
										adlast.MakeAll_TypeExpr(
											adlast.Make_TypeRef_reference(
												adlast.MakeAll_ScopedName(
													"exer06.tttest",
													"S3",
												),
											),
											[]adlast.TypeExpr{},
										),
									},
								),
							},
						),
						types.Make_Maybe_nothing[any](),
						customtypes.MapMap[adlast.ScopedName, any]{},
					),
				},
			),
		),
		customtypes.MapMap[adlast.ScopedName, any]{},
	)
	return adlast.Make_ScopedDecl("exer06.tttest", decl)
}

func init() {
	goadl.RESOLVER.Register(
		adlast.Make_ScopedName("exer06.tttest", "S2"),
		AST_S2(),
	)
}

func Texpr_S3() adlast.ATypeExpr[S3] {
	te := adlast.Make_TypeExpr(
		adlast.Make_TypeRef_reference(
			adlast.Make_ScopedName("exer06.tttest", "S3"),
		),
		[]adlast.TypeExpr{},
	)
	return adlast.Make_ATypeExpr[S3](te)
}

func AST_S3() adlast.ScopedDecl {
	decl := adlast.MakeAll_Decl(
		"S3",
		types.Make_Maybe_nothing[uint32](),
		adlast.Make_DeclType_struct_(
			adlast.MakeAll_Struct(
				[]adlast.Ident{},
				[]adlast.Field{
					adlast.MakeAll_Field(
						"a",
						"a",
						adlast.MakeAll_TypeExpr(
							adlast.Make_TypeRef_primitive(
								"TypeToken",
							),
							[]adlast.TypeExpr{
								adlast.MakeAll_TypeExpr(
									adlast.Make_TypeRef_primitive(
										"String",
									),
									[]adlast.TypeExpr{},
								),
							},
						),
						types.Make_Maybe_nothing[any](),
						customtypes.MapMap[adlast.ScopedName, any]{},
					),
				},
			),
		),
		customtypes.MapMap[adlast.ScopedName, any]{},
	)
	return adlast.Make_ScopedDecl("exer06.tttest", decl)
}

func init() {
	goadl.RESOLVER.Register(
		adlast.Make_ScopedName("exer06.tttest", "S3"),
		AST_S3(),
	)
}

func Texpr_S4[A any](a adlast.ATypeExpr[A]) adlast.ATypeExpr[S4[A]] {
	te := adlast.Make_TypeExpr(
		adlast.Make_TypeRef_reference(
			adlast.Make_ScopedName("exer06.tttest", "S4"),
		),
		[]adlast.TypeExpr{a.Value},
	)
	return adlast.Make_ATypeExpr[S4[A]](te)
}

func AST_S4() adlast.ScopedDecl {
	decl := adlast.MakeAll_Decl(
		"S4",
		types.Make_Maybe_nothing[uint32](),
		adlast.Make_DeclType_struct_(
			adlast.MakeAll_Struct(
				[]adlast.Ident{
					"A",
				},
				[]adlast.Field{
					adlast.MakeAll_Field(
						"z",
						"z",
						adlast.MakeAll_TypeExpr(
							adlast.Make_TypeRef_reference(
								adlast.MakeAll_ScopedName(
									"exer06.tttest",
									"S1",
								),
							),
							[]adlast.TypeExpr{
								adlast.MakeAll_TypeExpr(
									adlast.Make_TypeRef_reference(
										adlast.MakeAll_ScopedName(
											"exer06.tttest",
											"S4",
										),
									),
									[]adlast.TypeExpr{
										adlast.MakeAll_TypeExpr(
											adlast.Make_TypeRef_typeParam(
												"A",
											),
											[]adlast.TypeExpr{},
										),
									},
								),
							},
						),
						types.Make_Maybe_nothing[any](),
						customtypes.MapMap[adlast.ScopedName, any]{},
					),
					adlast.MakeAll_Field(
						"a",
						"a",
						adlast.MakeAll_TypeExpr(
							adlast.Make_TypeRef_typeParam(
								"A",
							),
							[]adlast.TypeExpr{},
						),
						types.Make_Maybe_nothing[any](),
						customtypes.MapMap[adlast.ScopedName, any]{},
					),
				},
			),
		),
		customtypes.MapMap[adlast.ScopedName, any]{},
	)
	return adlast.Make_ScopedDecl("exer06.tttest", decl)
}

func init() {
	goadl.RESOLVER.Register(
		adlast.Make_ScopedName("exer06.tttest", "S4"),
		AST_S4(),
	)
}

func Texpr_S5[A any, B any](a adlast.ATypeExpr[A], b adlast.ATypeExpr[B]) adlast.ATypeExpr[S5[A, B]] {
	te := adlast.Make_TypeExpr(
		adlast.Make_TypeRef_reference(
			adlast.Make_ScopedName("exer06.tttest", "S5"),
		),
		[]adlast.TypeExpr{a.Value, b.Value},
	)
	return adlast.Make_ATypeExpr[S5[A, B]](te)
}

func AST_S5() adlast.ScopedDecl {
	decl := adlast.MakeAll_Decl(
		"S5",
		types.Make_Maybe_nothing[uint32](),
		adlast.Make_DeclType_struct_(
			adlast.MakeAll_Struct(
				[]adlast.Ident{
					"A",
					"B",
				},
				[]adlast.Field{
					adlast.MakeAll_Field(
						"a",
						"a",
						adlast.MakeAll_TypeExpr(
							adlast.Make_TypeRef_primitive(
								"TypeToken",
							),
							[]adlast.TypeExpr{
								adlast.MakeAll_TypeExpr(
									adlast.Make_TypeRef_typeParam(
										"A",
									),
									[]adlast.TypeExpr{},
								),
							},
						),
						types.Make_Maybe_just[any](
							nil,
						),
						customtypes.MapMap[adlast.ScopedName, any]{},
					),
					adlast.MakeAll_Field(
						"b",
						"b",
						adlast.MakeAll_TypeExpr(
							adlast.Make_TypeRef_primitive(
								"TypeToken",
							),
							[]adlast.TypeExpr{
								adlast.MakeAll_TypeExpr(
									adlast.Make_TypeRef_typeParam(
										"B",
									),
									[]adlast.TypeExpr{},
								),
							},
						),
						types.Make_Maybe_just[any](
							nil,
						),
						customtypes.MapMap[adlast.ScopedName, any]{},
					),
				},
			),
		),
		customtypes.MapMap[adlast.ScopedName, any]{},
	)
	return adlast.Make_ScopedDecl("exer06.tttest", decl)
}

func init() {
	goadl.RESOLVER.Register(
		adlast.Make_ScopedName("exer06.tttest", "S5"),
		AST_S5(),
	)
}

func Texpr_T1() adlast.ATypeExpr[T1] {
	te := adlast.Make_TypeExpr(
		adlast.Make_TypeRef_reference(
			adlast.Make_ScopedName("exer06.tttest", "T1"),
		),
		[]adlast.TypeExpr{},
	)
	return adlast.Make_ATypeExpr[T1](te)
}

func AST_T1() adlast.ScopedDecl {
	decl := adlast.MakeAll_Decl(
		"T1",
		types.Make_Maybe_nothing[uint32](),
		adlast.Make_DeclType_type_(
			adlast.MakeAll_TypeDef(
				[]adlast.Ident{},
				adlast.MakeAll_TypeExpr(
					adlast.Make_TypeRef_reference(
						adlast.MakeAll_ScopedName(
							"exer06.tttest",
							"S1",
						),
					),
					[]adlast.TypeExpr{
						adlast.MakeAll_TypeExpr(
							adlast.Make_TypeRef_primitive(
								"String",
							),
							[]adlast.TypeExpr{},
						),
					},
				),
			),
		),
		customtypes.MapMap[adlast.ScopedName, any]{},
	)
	return adlast.Make_ScopedDecl("exer06.tttest", decl)
}

func init() {
	goadl.RESOLVER.Register(
		adlast.Make_ScopedName("exer06.tttest", "T1"),
		AST_T1(),
	)
}

func Texpr_U1[A any](a adlast.ATypeExpr[A]) adlast.ATypeExpr[U1[A]] {
	te := adlast.Make_TypeExpr(
		adlast.Make_TypeRef_reference(
			adlast.Make_ScopedName("exer06.tttest", "U1"),
		),
		[]adlast.TypeExpr{a.Value},
	)
	return adlast.Make_ATypeExpr[U1[A]](te)
}

func AST_U1() adlast.ScopedDecl {
	decl := adlast.MakeAll_Decl(
		"U1",
		types.Make_Maybe_nothing[uint32](),
		adlast.Make_DeclType_union_(
			adlast.MakeAll_Union(
				[]adlast.Ident{
					"A",
				},
				[]adlast.Field{
					adlast.MakeAll_Field(
						"a",
						"a",
						adlast.MakeAll_TypeExpr(
							adlast.Make_TypeRef_primitive(
								"TypeToken",
							),
							[]adlast.TypeExpr{
								adlast.MakeAll_TypeExpr(
									adlast.Make_TypeRef_typeParam(
										"A",
									),
									[]adlast.TypeExpr{},
								),
							},
						),
						types.Make_Maybe_nothing[any](),
						customtypes.MapMap[adlast.ScopedName, any]{},
					),
					adlast.MakeAll_Field(
						"b",
						"b",
						adlast.MakeAll_TypeExpr(
							adlast.Make_TypeRef_primitive(
								"String",
							),
							[]adlast.TypeExpr{},
						),
						types.Make_Maybe_nothing[any](),
						customtypes.MapMap[adlast.ScopedName, any]{},
					),
					adlast.MakeAll_Field(
						"c",
						"c",
						adlast.MakeAll_TypeExpr(
							adlast.Make_TypeRef_primitive(
								"Void",
							),
							[]adlast.TypeExpr{},
						),
						types.Make_Maybe_nothing[any](),
						customtypes.MapMap[adlast.ScopedName, any]{},
					),
				},
			),
		),
		customtypes.MapMap[adlast.ScopedName, any]{},
	)
	return adlast.Make_ScopedDecl("exer06.tttest", decl)
}

func init() {
	goadl.RESOLVER.Register(
		adlast.Make_ScopedName("exer06.tttest", "U1"),
		AST_U1(),
	)
}

func Texpr_X[A any](a adlast.ATypeExpr[A]) adlast.ATypeExpr[X[A]] {
	te := adlast.Make_TypeExpr(
		adlast.Make_TypeRef_reference(
			adlast.Make_ScopedName("exer06.tttest", "X"),
		),
		[]adlast.TypeExpr{a.Value},
	)
	return adlast.Make_ATypeExpr[X[A]](te)
}

func AST_X() adlast.ScopedDecl {
	decl := adlast.MakeAll_Decl(
		"X",
		types.Make_Maybe_nothing[uint32](),
		adlast.Make_DeclType_newtype_(
			adlast.MakeAll_NewType(
				[]adlast.Ident{
					"A",
				},
				adlast.MakeAll_TypeExpr(
					adlast.Make_TypeRef_reference(
						adlast.MakeAll_ScopedName(
							"exer06.tttest",
							"S1",
						),
					),
					[]adlast.TypeExpr{
						adlast.MakeAll_TypeExpr(
							adlast.Make_TypeRef_typeParam(
								"A",
							),
							[]adlast.TypeExpr{},
						),
					},
				),
				types.Make_Maybe_nothing[any](),
			),
		),
		customtypes.MapMap[adlast.ScopedName, any]{},
	)
	return adlast.Make_ScopedDecl("exer06.tttest", decl)
}

func init() {
	goadl.RESOLVER.Register(
		adlast.Make_ScopedName("exer06.tttest", "X"),
		AST_X(),
	)
}

func AST_Xt() adlast.ScopedDecl {
	decl := adlast.MakeAll_Decl(
		"Xt",
		types.Make_Maybe_nothing[uint32](),
		adlast.Make_DeclType_type_(
			adlast.MakeAll_TypeDef(
				[]adlast.Ident{
					"A",
				},
				adlast.MakeAll_TypeExpr(
					adlast.Make_TypeRef_reference(
						adlast.MakeAll_ScopedName(
							"exer06.tttest",
							"S1",
						),
					),
					[]adlast.TypeExpr{
						adlast.MakeAll_TypeExpr(
							adlast.Make_TypeRef_reference(
								adlast.MakeAll_ScopedName(
									"exer06.tttest",
									"S4",
								),
							),
							[]adlast.TypeExpr{
								adlast.MakeAll_TypeExpr(
									adlast.Make_TypeRef_typeParam(
										"A",
									),
									[]adlast.TypeExpr{},
								),
							},
						),
					},
				),
			),
		),
		customtypes.MapMap[adlast.ScopedName, any]{},
	)
	return adlast.Make_ScopedDecl("exer06.tttest", decl)
}

func init() {
	goadl.RESOLVER.Register(
		adlast.Make_ScopedName("exer06.tttest", "Xt"),
		AST_Xt(),
	)
}

func Texpr_Y() adlast.ATypeExpr[Y] {
	te := adlast.Make_TypeExpr(
		adlast.Make_TypeRef_reference(
			adlast.Make_ScopedName("exer06.tttest", "Y"),
		),
		[]adlast.TypeExpr{},
	)
	return adlast.Make_ATypeExpr[Y](te)
}

func AST_Y() adlast.ScopedDecl {
	decl := adlast.MakeAll_Decl(
		"Y",
		types.Make_Maybe_nothing[uint32](),
		adlast.Make_DeclType_struct_(
			adlast.MakeAll_Struct(
				[]adlast.Ident{},
				[]adlast.Field{
					adlast.MakeAll_Field(
						"a",
						"a",
						adlast.MakeAll_TypeExpr(
							adlast.Make_TypeRef_reference(
								adlast.MakeAll_ScopedName(
									"exer06.tttest",
									"Xt",
								),
							),
							[]adlast.TypeExpr{
								adlast.MakeAll_TypeExpr(
									adlast.Make_TypeRef_primitive(
										"String",
									),
									[]adlast.TypeExpr{},
								),
							},
						),
						types.Make_Maybe_nothing[any](),
						customtypes.MapMap[adlast.ScopedName, any]{},
					),
				},
			),
		),
		customtypes.MapMap[adlast.ScopedName, any]{},
	)
	return adlast.Make_ScopedDecl("exer06.tttest", decl)
}

func init() {
	goadl.RESOLVER.Register(
		adlast.Make_ScopedName("exer06.tttest", "Y"),
		AST_Y(),
	)
}

func Texpr_Z() adlast.ATypeExpr[Z] {
	te := adlast.Make_TypeExpr(
		adlast.Make_TypeRef_reference(
			adlast.Make_ScopedName("exer06.tttest", "Z"),
		),
		[]adlast.TypeExpr{},
	)
	return adlast.Make_ATypeExpr[Z](te)
}

func AST_Z() adlast.ScopedDecl {
	decl := adlast.MakeAll_Decl(
		"Z",
		types.Make_Maybe_nothing[uint32](),
		adlast.Make_DeclType_struct_(
			adlast.MakeAll_Struct(
				[]adlast.Ident{},
				[]adlast.Field{
					adlast.MakeAll_Field(
						"a",
						"a",
						adlast.MakeAll_TypeExpr(
							adlast.Make_TypeRef_reference(
								adlast.MakeAll_ScopedName(
									"exer06.tttest",
									"S1",
								),
							),
							[]adlast.TypeExpr{
								adlast.MakeAll_TypeExpr(
									adlast.Make_TypeRef_primitive(
										"String",
									),
									[]adlast.TypeExpr{},
								),
							},
						),
						types.Make_Maybe_just[any](
							map[string]interface{}{},
						),
						customtypes.MapMap[adlast.ScopedName, any]{},
					),
					adlast.MakeAll_Field(
						"b",
						"b",
						adlast.MakeAll_TypeExpr(
							adlast.Make_TypeRef_reference(
								adlast.MakeAll_ScopedName(
									"exer06.tttest",
									"X",
								),
							),
							[]adlast.TypeExpr{
								adlast.MakeAll_TypeExpr(
									adlast.Make_TypeRef_primitive(
										"Int64",
									),
									[]adlast.TypeExpr{},
								),
							},
						),
						types.Make_Maybe_just[any](
							map[string]interface{}{},
						),
						customtypes.MapMap[adlast.ScopedName, any]{},
					),
					adlast.MakeAll_Field(
						"c",
						"c",
						adlast.MakeAll_TypeExpr(
							adlast.Make_TypeRef_reference(
								adlast.MakeAll_ScopedName(
									"exer06.tttest",
									"S5",
								),
							),
							[]adlast.TypeExpr{
								adlast.MakeAll_TypeExpr(
									adlast.Make_TypeRef_primitive(
										"String",
									),
									[]adlast.TypeExpr{},
								),
								adlast.MakeAll_TypeExpr(
									adlast.Make_TypeRef_primitive(
										"Int64",
									),
									[]adlast.TypeExpr{},
								),
							},
						),
						types.Make_Maybe_just[any](
							map[string]interface{}{},
						),
						customtypes.MapMap[adlast.ScopedName, any]{},
					),
				},
			),
		),
		customtypes.MapMap[adlast.ScopedName, any]{},
	)
	return adlast.Make_ScopedDecl("exer06.tttest", decl)
}

func init() {
	goadl.RESOLVER.Register(
		adlast.Make_ScopedName("exer06.tttest", "Z"),
		AST_Z(),
	)
}
