// Code generated by goadlc v3 - DO NOT EDIT.
package test01

import (
	goadl "github.com/adl-lang/goadl_rt/v3"
	"github.com/adl-lang/goadl_rt/v3/customtypes"
	"github.com/adl-lang/goadl_rt/v3/sys/adlast"
	"github.com/adl-lang/goadl_rt/v3/sys/types"
)

func Texpr_A() goadl.ATypeExpr[A] {
	return goadl.ATypeExpr[A]{
		Value: adlast.TypeExpr{
			TypeRef: adlast.TypeRef{
				Branch: adlast.TypeRef_Reference{
					V: adlast.ScopedName{
						ModuleName: "decode.test01",
						Name:       "A",
					},
				},
			},
			Parameters: []adlast.TypeExpr{},
		},
	}
}

func AST_A() adlast.ScopedDecl {
	decl := adlast.Decl{
		Name: "A",
		Version: types.Maybe[uint32]{
			Branch: types.Maybe_Nothing{
				V: struct{}{}},
		},
		Type_: adlast.DeclType{
			Branch: adlast.DeclType_Newtype_{
				V: adlast.NewType{
					TypeParams: []adlast.Ident{},
					TypeExpr: adlast.TypeExpr{
						TypeRef: adlast.TypeRef{
							Branch: adlast.TypeRef_Primitive{
								V: "Int64"},
						},
						Parameters: []adlast.TypeExpr{},
					},
					Default: types.Maybe[any]{
						Branch: types.Maybe_Nothing{
							V: struct{}{}},
					},
				}},
		},
		Annotations: customtypes.MapMap[adlast.ScopedName, any]{},
	}
	return adlast.ScopedDecl{
		ModuleName: "decode.test01",
		Decl:       decl,
	}
}

func init() {
	goadl.RESOLVER.Register(
		adlast.ScopedName{ModuleName: "decode.test01", Name: "A"},
		AST_A(),
	)
}

func Texpr_B() goadl.ATypeExpr[B] {
	return goadl.ATypeExpr[B]{
		Value: adlast.TypeExpr{
			TypeRef: adlast.TypeRef{
				Branch: adlast.TypeRef_Reference{
					V: adlast.ScopedName{
						ModuleName: "decode.test01",
						Name:       "B",
					},
				},
			},
			Parameters: []adlast.TypeExpr{},
		},
	}
}

func AST_B() adlast.ScopedDecl {
	decl := adlast.Decl{
		Name: "B",
		Version: types.Maybe[uint32]{
			Branch: types.Maybe_Nothing{
				V: struct{}{}},
		},
		Type_: adlast.DeclType{
			Branch: adlast.DeclType_Struct_{
				V: adlast.Struct{
					TypeParams: []adlast.Ident{},
					Fields: []adlast.Field{
						adlast.Field{
							Name:           "a",
							SerializedName: "a",
							TypeExpr: adlast.TypeExpr{
								TypeRef: adlast.TypeRef{
									Branch: adlast.TypeRef_Primitive{
										V: "Int64"},
								},
								Parameters: []adlast.TypeExpr{},
							},
							Default: types.Maybe[any]{
								Branch: types.Maybe_Nothing{
									V: struct{}{}},
							},
							Annotations: customtypes.MapMap[adlast.ScopedName, any]{},
						},
					},
				}},
		},
		Annotations: customtypes.MapMap[adlast.ScopedName, any]{},
	}
	return adlast.ScopedDecl{
		ModuleName: "decode.test01",
		Decl:       decl,
	}
}

func init() {
	goadl.RESOLVER.Register(
		adlast.ScopedName{ModuleName: "decode.test01", Name: "B"},
		AST_B(),
	)
}

func Texpr_Bool() goadl.ATypeExpr[Bool] {
	return goadl.ATypeExpr[Bool]{
		Value: adlast.TypeExpr{
			TypeRef: adlast.TypeRef{
				Branch: adlast.TypeRef_Reference{
					V: adlast.ScopedName{
						ModuleName: "decode.test01",
						Name:       "Bool",
					},
				},
			},
			Parameters: []adlast.TypeExpr{},
		},
	}
}

func AST_Bool() adlast.ScopedDecl {
	decl := adlast.Decl{
		Name: "Bool",
		Version: types.Maybe[uint32]{
			Branch: types.Maybe_Nothing{
				V: struct{}{}},
		},
		Type_: adlast.DeclType{
			Branch: adlast.DeclType_Struct_{
				V: adlast.Struct{
					TypeParams: []adlast.Ident{},
					Fields: []adlast.Field{
						adlast.Field{
							Name:           "a",
							SerializedName: "a",
							TypeExpr: adlast.TypeExpr{
								TypeRef: adlast.TypeRef{
									Branch: adlast.TypeRef_Primitive{
										V: "Bool"},
								},
								Parameters: []adlast.TypeExpr{},
							},
							Default: types.Maybe[any]{
								Branch: types.Maybe_Nothing{
									V: struct{}{}},
							},
							Annotations: customtypes.MapMap[adlast.ScopedName, any]{},
						},
					},
				}},
		},
		Annotations: customtypes.MapMap[adlast.ScopedName, any]{},
	}
	return adlast.ScopedDecl{
		ModuleName: "decode.test01",
		Decl:       decl,
	}
}

func init() {
	goadl.RESOLVER.Register(
		adlast.ScopedName{ModuleName: "decode.test01", Name: "Bool"},
		AST_Bool(),
	)
}

func Texpr_C() goadl.ATypeExpr[C] {
	return goadl.ATypeExpr[C]{
		Value: adlast.TypeExpr{
			TypeRef: adlast.TypeRef{
				Branch: adlast.TypeRef_Reference{
					V: adlast.ScopedName{
						ModuleName: "decode.test01",
						Name:       "C",
					},
				},
			},
			Parameters: []adlast.TypeExpr{},
		},
	}
}

func AST_C() adlast.ScopedDecl {
	decl := adlast.Decl{
		Name: "C",
		Version: types.Maybe[uint32]{
			Branch: types.Maybe_Nothing{
				V: struct{}{}},
		},
		Type_: adlast.DeclType{
			Branch: adlast.DeclType_Struct_{
				V: adlast.Struct{
					TypeParams: []adlast.Ident{},
					Fields: []adlast.Field{
						adlast.Field{
							Name:           "b",
							SerializedName: "b",
							TypeExpr: adlast.TypeExpr{
								TypeRef: adlast.TypeRef{
									Branch: adlast.TypeRef_Reference{
										V: adlast.ScopedName{
											ModuleName: "decode.test01",
											Name:       "B",
										}},
								},
								Parameters: []adlast.TypeExpr{},
							},
							Default: types.Maybe[any]{
								Branch: types.Maybe_Nothing{
									V: struct{}{}},
							},
							Annotations: customtypes.MapMap[adlast.ScopedName, any]{},
						},
						adlast.Field{
							Name:           "c",
							SerializedName: "c",
							TypeExpr: adlast.TypeExpr{
								TypeRef: adlast.TypeRef{
									Branch: adlast.TypeRef_Reference{
										V: adlast.ScopedName{
											ModuleName: "decode.test01",
											Name:       "B",
										}},
								},
								Parameters: []adlast.TypeExpr{},
							},
							Default: types.Maybe[any]{
								Branch: types.Maybe_Nothing{
									V: struct{}{}},
							},
							Annotations: customtypes.MapMap[adlast.ScopedName, any]{},
						},
					},
				}},
		},
		Annotations: customtypes.MapMap[adlast.ScopedName, any]{},
	}
	return adlast.ScopedDecl{
		ModuleName: "decode.test01",
		Decl:       decl,
	}
}

func init() {
	goadl.RESOLVER.Register(
		adlast.ScopedName{ModuleName: "decode.test01", Name: "C"},
		AST_C(),
	)
}

func Texpr_D() goadl.ATypeExpr[D] {
	return goadl.ATypeExpr[D]{
		Value: adlast.TypeExpr{
			TypeRef: adlast.TypeRef{
				Branch: adlast.TypeRef_Reference{
					V: adlast.ScopedName{
						ModuleName: "decode.test01",
						Name:       "D",
					},
				},
			},
			Parameters: []adlast.TypeExpr{},
		},
	}
}

func AST_D() adlast.ScopedDecl {
	decl := adlast.Decl{
		Name: "D",
		Version: types.Maybe[uint32]{
			Branch: types.Maybe_Nothing{
				V: struct{}{}},
		},
		Type_: adlast.DeclType{
			Branch: adlast.DeclType_Union_{
				V: adlast.Union{
					TypeParams: []adlast.Ident{},
					Fields: []adlast.Field{
						adlast.Field{
							Name:           "a",
							SerializedName: "a",
							TypeExpr: adlast.TypeExpr{
								TypeRef: adlast.TypeRef{
									Branch: adlast.TypeRef_Primitive{
										V: "Int64"},
								},
								Parameters: []adlast.TypeExpr{},
							},
							Default: types.Maybe[any]{
								Branch: types.Maybe_Nothing{
									V: struct{}{}},
							},
							Annotations: customtypes.MapMap[adlast.ScopedName, any]{},
						},
						adlast.Field{
							Name:           "b",
							SerializedName: "b",
							TypeExpr: adlast.TypeExpr{
								TypeRef: adlast.TypeRef{
									Branch: adlast.TypeRef_Reference{
										V: adlast.ScopedName{
											ModuleName: "decode.test01",
											Name:       "B",
										}},
								},
								Parameters: []adlast.TypeExpr{},
							},
							Default: types.Maybe[any]{
								Branch: types.Maybe_Nothing{
									V: struct{}{}},
							},
							Annotations: customtypes.MapMap[adlast.ScopedName, any]{},
						},
					},
				}},
		},
		Annotations: customtypes.MapMap[adlast.ScopedName, any]{},
	}
	return adlast.ScopedDecl{
		ModuleName: "decode.test01",
		Decl:       decl,
	}
}

func init() {
	goadl.RESOLVER.Register(
		adlast.ScopedName{ModuleName: "decode.test01", Name: "D"},
		AST_D(),
	)
}

func Texpr_E() goadl.ATypeExpr[E] {
	return goadl.ATypeExpr[E]{
		Value: adlast.TypeExpr{
			TypeRef: adlast.TypeRef{
				Branch: adlast.TypeRef_Reference{
					V: adlast.ScopedName{
						ModuleName: "decode.test01",
						Name:       "E",
					},
				},
			},
			Parameters: []adlast.TypeExpr{},
		},
	}
}

func AST_E() adlast.ScopedDecl {
	decl := adlast.Decl{
		Name: "E",
		Version: types.Maybe[uint32]{
			Branch: types.Maybe_Nothing{
				V: struct{}{}},
		},
		Type_: adlast.DeclType{
			Branch: adlast.DeclType_Struct_{
				V: adlast.Struct{
					TypeParams: []adlast.Ident{},
					Fields: []adlast.Field{
						adlast.Field{
							Name:           "d",
							SerializedName: "d",
							TypeExpr: adlast.TypeExpr{
								TypeRef: adlast.TypeRef{
									Branch: adlast.TypeRef_Reference{
										V: adlast.ScopedName{
											ModuleName: "decode.test01",
											Name:       "D",
										}},
								},
								Parameters: []adlast.TypeExpr{},
							},
							Default: types.Maybe[any]{
								Branch: types.Maybe_Nothing{
									V: struct{}{}},
							},
							Annotations: customtypes.MapMap[adlast.ScopedName, any]{},
						},
					},
				}},
		},
		Annotations: customtypes.MapMap[adlast.ScopedName, any]{},
	}
	return adlast.ScopedDecl{
		ModuleName: "decode.test01",
		Decl:       decl,
	}
}

func init() {
	goadl.RESOLVER.Register(
		adlast.ScopedName{ModuleName: "decode.test01", Name: "E"},
		AST_E(),
	)
}

func Texpr_F() goadl.ATypeExpr[F] {
	return goadl.ATypeExpr[F]{
		Value: adlast.TypeExpr{
			TypeRef: adlast.TypeRef{
				Branch: adlast.TypeRef_Reference{
					V: adlast.ScopedName{
						ModuleName: "decode.test01",
						Name:       "F",
					},
				},
			},
			Parameters: []adlast.TypeExpr{},
		},
	}
}

func AST_F() adlast.ScopedDecl {
	decl := adlast.Decl{
		Name: "F",
		Version: types.Maybe[uint32]{
			Branch: types.Maybe_Nothing{
				V: struct{}{}},
		},
		Type_: adlast.DeclType{
			Branch: adlast.DeclType_Struct_{
				V: adlast.Struct{
					TypeParams: []adlast.Ident{},
					Fields: []adlast.Field{
						adlast.Field{
							Name:           "a",
							SerializedName: "a",
							TypeExpr: adlast.TypeExpr{
								TypeRef: adlast.TypeRef{
									Branch: adlast.TypeRef_Primitive{
										V: "Int8"},
								},
								Parameters: []adlast.TypeExpr{},
							},
							Default: types.Maybe[any]{
								Branch: types.Maybe_Nothing{
									V: struct{}{}},
							},
							Annotations: customtypes.MapMap[adlast.ScopedName, any]{},
						},
						adlast.Field{
							Name:           "b",
							SerializedName: "b",
							TypeExpr: adlast.TypeExpr{
								TypeRef: adlast.TypeRef{
									Branch: adlast.TypeRef_Primitive{
										V: "Int16"},
								},
								Parameters: []adlast.TypeExpr{},
							},
							Default: types.Maybe[any]{
								Branch: types.Maybe_Nothing{
									V: struct{}{}},
							},
							Annotations: customtypes.MapMap[adlast.ScopedName, any]{},
						},
						adlast.Field{
							Name:           "c",
							SerializedName: "c",
							TypeExpr: adlast.TypeExpr{
								TypeRef: adlast.TypeRef{
									Branch: adlast.TypeRef_Primitive{
										V: "Int32"},
								},
								Parameters: []adlast.TypeExpr{},
							},
							Default: types.Maybe[any]{
								Branch: types.Maybe_Nothing{
									V: struct{}{}},
							},
							Annotations: customtypes.MapMap[adlast.ScopedName, any]{},
						},
						adlast.Field{
							Name:           "d",
							SerializedName: "d",
							TypeExpr: adlast.TypeExpr{
								TypeRef: adlast.TypeRef{
									Branch: adlast.TypeRef_Primitive{
										V: "Int64"},
								},
								Parameters: []adlast.TypeExpr{},
							},
							Default: types.Maybe[any]{
								Branch: types.Maybe_Nothing{
									V: struct{}{}},
							},
							Annotations: customtypes.MapMap[adlast.ScopedName, any]{},
						},
						adlast.Field{
							Name:           "e",
							SerializedName: "e",
							TypeExpr: adlast.TypeExpr{
								TypeRef: adlast.TypeRef{
									Branch: adlast.TypeRef_Primitive{
										V: "Word8"},
								},
								Parameters: []adlast.TypeExpr{},
							},
							Default: types.Maybe[any]{
								Branch: types.Maybe_Nothing{
									V: struct{}{}},
							},
							Annotations: customtypes.MapMap[adlast.ScopedName, any]{},
						},
						adlast.Field{
							Name:           "f",
							SerializedName: "f",
							TypeExpr: adlast.TypeExpr{
								TypeRef: adlast.TypeRef{
									Branch: adlast.TypeRef_Primitive{
										V: "Word16"},
								},
								Parameters: []adlast.TypeExpr{},
							},
							Default: types.Maybe[any]{
								Branch: types.Maybe_Nothing{
									V: struct{}{}},
							},
							Annotations: customtypes.MapMap[adlast.ScopedName, any]{},
						},
						adlast.Field{
							Name:           "g",
							SerializedName: "g",
							TypeExpr: adlast.TypeExpr{
								TypeRef: adlast.TypeRef{
									Branch: adlast.TypeRef_Primitive{
										V: "Word32"},
								},
								Parameters: []adlast.TypeExpr{},
							},
							Default: types.Maybe[any]{
								Branch: types.Maybe_Nothing{
									V: struct{}{}},
							},
							Annotations: customtypes.MapMap[adlast.ScopedName, any]{},
						},
						adlast.Field{
							Name:           "h",
							SerializedName: "h",
							TypeExpr: adlast.TypeExpr{
								TypeRef: adlast.TypeRef{
									Branch: adlast.TypeRef_Primitive{
										V: "Word64"},
								},
								Parameters: []adlast.TypeExpr{},
							},
							Default: types.Maybe[any]{
								Branch: types.Maybe_Nothing{
									V: struct{}{}},
							},
							Annotations: customtypes.MapMap[adlast.ScopedName, any]{},
						},
						adlast.Field{
							Name:           "i",
							SerializedName: "i",
							TypeExpr: adlast.TypeExpr{
								TypeRef: adlast.TypeRef{
									Branch: adlast.TypeRef_Primitive{
										V: "Bool"},
								},
								Parameters: []adlast.TypeExpr{},
							},
							Default: types.Maybe[any]{
								Branch: types.Maybe_Nothing{
									V: struct{}{}},
							},
							Annotations: customtypes.MapMap[adlast.ScopedName, any]{},
						},
						adlast.Field{
							Name:           "j",
							SerializedName: "j",
							TypeExpr: adlast.TypeExpr{
								TypeRef: adlast.TypeRef{
									Branch: adlast.TypeRef_Primitive{
										V: "Float"},
								},
								Parameters: []adlast.TypeExpr{},
							},
							Default: types.Maybe[any]{
								Branch: types.Maybe_Nothing{
									V: struct{}{}},
							},
							Annotations: customtypes.MapMap[adlast.ScopedName, any]{},
						},
						adlast.Field{
							Name:           "k",
							SerializedName: "k",
							TypeExpr: adlast.TypeExpr{
								TypeRef: adlast.TypeRef{
									Branch: adlast.TypeRef_Primitive{
										V: "Double"},
								},
								Parameters: []adlast.TypeExpr{},
							},
							Default: types.Maybe[any]{
								Branch: types.Maybe_Nothing{
									V: struct{}{}},
							},
							Annotations: customtypes.MapMap[adlast.ScopedName, any]{},
						},
						adlast.Field{
							Name:           "l",
							SerializedName: "l",
							TypeExpr: adlast.TypeExpr{
								TypeRef: adlast.TypeRef{
									Branch: adlast.TypeRef_Primitive{
										V: "String"},
								},
								Parameters: []adlast.TypeExpr{},
							},
							Default: types.Maybe[any]{
								Branch: types.Maybe_Nothing{
									V: struct{}{}},
							},
							Annotations: customtypes.MapMap[adlast.ScopedName, any]{},
						},
						adlast.Field{
							Name:           "n",
							SerializedName: "n",
							TypeExpr: adlast.TypeExpr{
								TypeRef: adlast.TypeRef{
									Branch: adlast.TypeRef_Primitive{
										V: "Json"},
								},
								Parameters: []adlast.TypeExpr{},
							},
							Default: types.Maybe[any]{
								Branch: types.Maybe_Nothing{
									V: struct{}{}},
							},
							Annotations: customtypes.MapMap[adlast.ScopedName, any]{},
						},
						adlast.Field{
							Name:           "o",
							SerializedName: "o",
							TypeExpr: adlast.TypeExpr{
								TypeRef: adlast.TypeRef{
									Branch: adlast.TypeRef_Primitive{
										V: "Vector"},
								},
								Parameters: []adlast.TypeExpr{
									adlast.TypeExpr{
										TypeRef: adlast.TypeRef{
											Branch: adlast.TypeRef_Primitive{
												V: "Int64"},
										},
										Parameters: []adlast.TypeExpr{},
									},
								},
							},
							Default: types.Maybe[any]{
								Branch: types.Maybe_Nothing{
									V: struct{}{}},
							},
							Annotations: customtypes.MapMap[adlast.ScopedName, any]{},
						},
						adlast.Field{
							Name:           "p",
							SerializedName: "p",
							TypeExpr: adlast.TypeExpr{
								TypeRef: adlast.TypeRef{
									Branch: adlast.TypeRef_Primitive{
										V: "StringMap"},
								},
								Parameters: []adlast.TypeExpr{
									adlast.TypeExpr{
										TypeRef: adlast.TypeRef{
											Branch: adlast.TypeRef_Primitive{
												V: "Int64"},
										},
										Parameters: []adlast.TypeExpr{},
									},
								},
							},
							Default: types.Maybe[any]{
								Branch: types.Maybe_Nothing{
									V: struct{}{}},
							},
							Annotations: customtypes.MapMap[adlast.ScopedName, any]{},
						},
						adlast.Field{
							Name:           "q",
							SerializedName: "q",
							TypeExpr: adlast.TypeExpr{
								TypeRef: adlast.TypeRef{
									Branch: adlast.TypeRef_Primitive{
										V: "Nullable"},
								},
								Parameters: []adlast.TypeExpr{
									adlast.TypeExpr{
										TypeRef: adlast.TypeRef{
											Branch: adlast.TypeRef_Primitive{
												V: "Int64"},
										},
										Parameters: []adlast.TypeExpr{},
									},
								},
							},
							Default: types.Maybe[any]{
								Branch: types.Maybe_Nothing{
									V: struct{}{}},
							},
							Annotations: customtypes.MapMap[adlast.ScopedName, any]{},
						},
						adlast.Field{
							Name:           "r",
							SerializedName: "r",
							TypeExpr: adlast.TypeExpr{
								TypeRef: adlast.TypeRef{
									Branch: adlast.TypeRef_Primitive{
										V: "Void"},
								},
								Parameters: []adlast.TypeExpr{},
							},
							Default: types.Maybe[any]{
								Branch: types.Maybe_Nothing{
									V: struct{}{}},
							},
							Annotations: customtypes.MapMap[adlast.ScopedName, any]{},
						},
					},
				}},
		},
		Annotations: customtypes.MapMap[adlast.ScopedName, any]{},
	}
	return adlast.ScopedDecl{
		ModuleName: "decode.test01",
		Decl:       decl,
	}
}

func init() {
	goadl.RESOLVER.Register(
		adlast.ScopedName{ModuleName: "decode.test01", Name: "F"},
		AST_F(),
	)
}

func Texpr_G() goadl.ATypeExpr[G] {
	return goadl.ATypeExpr[G]{
		Value: adlast.TypeExpr{
			TypeRef: adlast.TypeRef{
				Branch: adlast.TypeRef_Reference{
					V: adlast.ScopedName{
						ModuleName: "decode.test01",
						Name:       "G",
					},
				},
			},
			Parameters: []adlast.TypeExpr{},
		},
	}
}

func AST_G() adlast.ScopedDecl {
	decl := adlast.Decl{
		Name: "G",
		Version: types.Maybe[uint32]{
			Branch: types.Maybe_Nothing{
				V: struct{}{}},
		},
		Type_: adlast.DeclType{
			Branch: adlast.DeclType_Struct_{
				V: adlast.Struct{
					TypeParams: []adlast.Ident{},
					Fields: []adlast.Field{
						adlast.Field{
							Name:           "a",
							SerializedName: "a",
							TypeExpr: adlast.TypeExpr{
								TypeRef: adlast.TypeRef{
									Branch: adlast.TypeRef_Primitive{
										V: "Vector"},
								},
								Parameters: []adlast.TypeExpr{
									adlast.TypeExpr{
										TypeRef: adlast.TypeRef{
											Branch: adlast.TypeRef_Reference{
												V: adlast.ScopedName{
													ModuleName: "decode.test01",
													Name:       "G",
												}},
										},
										Parameters: []adlast.TypeExpr{},
									},
								},
							},
							Default: types.Maybe[any]{
								Branch: types.Maybe_Nothing{
									V: struct{}{}},
							},
							Annotations: customtypes.MapMap[adlast.ScopedName, any]{},
						},
					},
				}},
		},
		Annotations: customtypes.MapMap[adlast.ScopedName, any]{},
	}
	return adlast.ScopedDecl{
		ModuleName: "decode.test01",
		Decl:       decl,
	}
}

func init() {
	goadl.RESOLVER.Register(
		adlast.ScopedName{ModuleName: "decode.test01", Name: "G"},
		AST_G(),
	)
}

func Texpr_GenericF[AA any](aa goadl.ATypeExpr[AA]) goadl.ATypeExpr[GenericF[AA]] {
	return goadl.ATypeExpr[GenericF[AA]]{
		Value: adlast.TypeExpr{
			TypeRef: adlast.TypeRef{
				Branch: adlast.TypeRef_Reference{
					V: adlast.ScopedName{
						ModuleName: "decode.test01",
						Name:       "GenericF",
					},
				},
			},
			Parameters: []adlast.TypeExpr{aa.Value},
		},
	}
}

func AST_GenericF() adlast.ScopedDecl {
	decl := adlast.Decl{
		Name: "GenericF",
		Version: types.Maybe[uint32]{
			Branch: types.Maybe_Nothing{
				V: struct{}{}},
		},
		Type_: adlast.DeclType{
			Branch: adlast.DeclType_Struct_{
				V: adlast.Struct{
					TypeParams: []adlast.Ident{
						"AA",
					},
					Fields: []adlast.Field{
						adlast.Field{
							Name:           "a",
							SerializedName: "a",
							TypeExpr: adlast.TypeExpr{
								TypeRef: adlast.TypeRef{
									Branch: adlast.TypeRef_TypeParam{
										V: "AA"},
								},
								Parameters: []adlast.TypeExpr{},
							},
							Default: types.Maybe[any]{
								Branch: types.Maybe_Nothing{
									V: struct{}{}},
							},
							Annotations: customtypes.MapMap[adlast.ScopedName, any]{},
						},
					},
				}},
		},
		Annotations: customtypes.MapMap[adlast.ScopedName, any]{},
	}
	return adlast.ScopedDecl{
		ModuleName: "decode.test01",
		Decl:       decl,
	}
}

func init() {
	goadl.RESOLVER.Register(
		adlast.ScopedName{ModuleName: "decode.test01", Name: "GenericF"},
		AST_GenericF(),
	)
}

func Texpr_HasDefault() goadl.ATypeExpr[HasDefault] {
	return goadl.ATypeExpr[HasDefault]{
		Value: adlast.TypeExpr{
			TypeRef: adlast.TypeRef{
				Branch: adlast.TypeRef_Reference{
					V: adlast.ScopedName{
						ModuleName: "decode.test01",
						Name:       "HasDefault",
					},
				},
			},
			Parameters: []adlast.TypeExpr{},
		},
	}
}

func AST_HasDefault() adlast.ScopedDecl {
	decl := adlast.Decl{
		Name: "HasDefault",
		Version: types.Maybe[uint32]{
			Branch: types.Maybe_Nothing{
				V: struct{}{}},
		},
		Type_: adlast.DeclType{
			Branch: adlast.DeclType_Struct_{
				V: adlast.Struct{
					TypeParams: []adlast.Ident{},
					Fields: []adlast.Field{
						adlast.Field{
							Name:           "a",
							SerializedName: "a",
							TypeExpr: adlast.TypeExpr{
								TypeRef: adlast.TypeRef{
									Branch: adlast.TypeRef_Primitive{
										V: "String"},
								},
								Parameters: []adlast.TypeExpr{},
							},
							Default: types.Maybe[any]{
								Branch: types.Maybe_Just[any]{
									V: "1234567890"},
							},
							Annotations: customtypes.MapMap[adlast.ScopedName, any]{},
						},
					},
				}},
		},
		Annotations: customtypes.MapMap[adlast.ScopedName, any]{},
	}
	return adlast.ScopedDecl{
		ModuleName: "decode.test01",
		Decl:       decl,
	}
}

func init() {
	goadl.RESOLVER.Register(
		adlast.ScopedName{ModuleName: "decode.test01", Name: "HasDefault"},
		AST_HasDefault(),
	)
}

func Texpr_Int() goadl.ATypeExpr[Int] {
	return goadl.ATypeExpr[Int]{
		Value: adlast.TypeExpr{
			TypeRef: adlast.TypeRef{
				Branch: adlast.TypeRef_Reference{
					V: adlast.ScopedName{
						ModuleName: "decode.test01",
						Name:       "Int",
					},
				},
			},
			Parameters: []adlast.TypeExpr{},
		},
	}
}

func AST_Int() adlast.ScopedDecl {
	decl := adlast.Decl{
		Name: "Int",
		Version: types.Maybe[uint32]{
			Branch: types.Maybe_Nothing{
				V: struct{}{}},
		},
		Type_: adlast.DeclType{
			Branch: adlast.DeclType_Struct_{
				V: adlast.Struct{
					TypeParams: []adlast.Ident{},
					Fields: []adlast.Field{
						adlast.Field{
							Name:           "a",
							SerializedName: "a",
							TypeExpr: adlast.TypeExpr{
								TypeRef: adlast.TypeRef{
									Branch: adlast.TypeRef_Primitive{
										V: "Int8"},
								},
								Parameters: []adlast.TypeExpr{},
							},
							Default: types.Maybe[any]{
								Branch: types.Maybe_Nothing{
									V: struct{}{}},
							},
							Annotations: customtypes.MapMap[adlast.ScopedName, any]{},
						},
					},
				}},
		},
		Annotations: customtypes.MapMap[adlast.ScopedName, any]{},
	}
	return adlast.ScopedDecl{
		ModuleName: "decode.test01",
		Decl:       decl,
	}
}

func init() {
	goadl.RESOLVER.Register(
		adlast.ScopedName{ModuleName: "decode.test01", Name: "Int"},
		AST_Int(),
	)
}

func Texpr_Json() goadl.ATypeExpr[Json] {
	return goadl.ATypeExpr[Json]{
		Value: adlast.TypeExpr{
			TypeRef: adlast.TypeRef{
				Branch: adlast.TypeRef_Reference{
					V: adlast.ScopedName{
						ModuleName: "decode.test01",
						Name:       "Json",
					},
				},
			},
			Parameters: []adlast.TypeExpr{},
		},
	}
}

func AST_Json() adlast.ScopedDecl {
	decl := adlast.Decl{
		Name: "Json",
		Version: types.Maybe[uint32]{
			Branch: types.Maybe_Nothing{
				V: struct{}{}},
		},
		Type_: adlast.DeclType{
			Branch: adlast.DeclType_Struct_{
				V: adlast.Struct{
					TypeParams: []adlast.Ident{},
					Fields: []adlast.Field{
						adlast.Field{
							Name:           "a",
							SerializedName: "a",
							TypeExpr: adlast.TypeExpr{
								TypeRef: adlast.TypeRef{
									Branch: adlast.TypeRef_Primitive{
										V: "Json"},
								},
								Parameters: []adlast.TypeExpr{},
							},
							Default: types.Maybe[any]{
								Branch: types.Maybe_Nothing{
									V: struct{}{}},
							},
							Annotations: customtypes.MapMap[adlast.ScopedName, any]{},
						},
					},
				}},
		},
		Annotations: customtypes.MapMap[adlast.ScopedName, any]{},
	}
	return adlast.ScopedDecl{
		ModuleName: "decode.test01",
		Decl:       decl,
	}
}

func init() {
	goadl.RESOLVER.Register(
		adlast.ScopedName{ModuleName: "decode.test01", Name: "Json"},
		AST_Json(),
	)
}

func Texpr_MapTest() goadl.ATypeExpr[MapTest] {
	return goadl.ATypeExpr[MapTest]{
		Value: adlast.TypeExpr{
			TypeRef: adlast.TypeRef{
				Branch: adlast.TypeRef_Reference{
					V: adlast.ScopedName{
						ModuleName: "decode.test01",
						Name:       "MapTest",
					},
				},
			},
			Parameters: []adlast.TypeExpr{},
		},
	}
}

func AST_MapTest() adlast.ScopedDecl {
	decl := adlast.Decl{
		Name: "MapTest",
		Version: types.Maybe[uint32]{
			Branch: types.Maybe_Nothing{
				V: struct{}{}},
		},
		Type_: adlast.DeclType{
			Branch: adlast.DeclType_Struct_{
				V: adlast.Struct{
					TypeParams: []adlast.Ident{},
					Fields: []adlast.Field{
						adlast.Field{
							Name:           "my_set",
							SerializedName: "my_set",
							TypeExpr: adlast.TypeExpr{
								TypeRef: adlast.TypeRef{
									Branch: adlast.TypeRef_Reference{
										V: adlast.ScopedName{
											ModuleName: "sys.types",
											Name:       "Map",
										}},
								},
								Parameters: []adlast.TypeExpr{
									adlast.TypeExpr{
										TypeRef: adlast.TypeRef{
											Branch: adlast.TypeRef_Primitive{
												V: "String"},
										},
										Parameters: []adlast.TypeExpr{},
									},
									adlast.TypeExpr{
										TypeRef: adlast.TypeRef{
											Branch: adlast.TypeRef_Primitive{
												V: "Int64"},
										},
										Parameters: []adlast.TypeExpr{},
									},
								},
							},
							Default: types.Maybe[any]{
								Branch: types.Maybe_Just[any]{
									V: []interface{}{map[string]interface{}{"k": "a", "v": 1}}},
							},
							Annotations: customtypes.MapMap[adlast.ScopedName, any]{},
						},
					},
				}},
		},
		Annotations: customtypes.MapMap[adlast.ScopedName, any]{},
	}
	return adlast.ScopedDecl{
		ModuleName: "decode.test01",
		Decl:       decl,
	}
}

func init() {
	goadl.RESOLVER.Register(
		adlast.ScopedName{ModuleName: "decode.test01", Name: "MapTest"},
		AST_MapTest(),
	)
}

func Texpr_MyV[A any](a goadl.ATypeExpr[A]) goadl.ATypeExpr[MyV[A]] {
	return goadl.ATypeExpr[MyV[A]]{
		Value: adlast.TypeExpr{
			TypeRef: adlast.TypeRef{
				Branch: adlast.TypeRef_Reference{
					V: adlast.ScopedName{
						ModuleName: "decode.test01",
						Name:       "MyV",
					},
				},
			},
			Parameters: []adlast.TypeExpr{a.Value},
		},
	}
}

func AST_MyV() adlast.ScopedDecl {
	decl := adlast.Decl{
		Name: "MyV",
		Version: types.Maybe[uint32]{
			Branch: types.Maybe_Nothing{
				V: struct{}{}},
		},
		Type_: adlast.DeclType{
			Branch: adlast.DeclType_Newtype_{
				V: adlast.NewType{
					TypeParams: []adlast.Ident{
						"A",
					},
					TypeExpr: adlast.TypeExpr{
						TypeRef: adlast.TypeRef{
							Branch: adlast.TypeRef_Primitive{
								V: "Vector"},
						},
						Parameters: []adlast.TypeExpr{
							adlast.TypeExpr{
								TypeRef: adlast.TypeRef{
									Branch: adlast.TypeRef_Reference{
										V: adlast.ScopedName{
											ModuleName: "decode.test01",
											Name:       "A",
										}},
								},
								Parameters: []adlast.TypeExpr{},
							},
						},
					},
					Default: types.Maybe[any]{
						Branch: types.Maybe_Nothing{
							V: struct{}{}},
					},
				}},
		},
		Annotations: customtypes.MapMap[adlast.ScopedName, any]{},
	}
	return adlast.ScopedDecl{
		ModuleName: "decode.test01",
		Decl:       decl,
	}
}

func init() {
	goadl.RESOLVER.Register(
		adlast.ScopedName{ModuleName: "decode.test01", Name: "MyV"},
		AST_MyV(),
	)
}

func Texpr_NoDefault() goadl.ATypeExpr[NoDefault] {
	return goadl.ATypeExpr[NoDefault]{
		Value: adlast.TypeExpr{
			TypeRef: adlast.TypeRef{
				Branch: adlast.TypeRef_Reference{
					V: adlast.ScopedName{
						ModuleName: "decode.test01",
						Name:       "NoDefault",
					},
				},
			},
			Parameters: []adlast.TypeExpr{},
		},
	}
}

func AST_NoDefault() adlast.ScopedDecl {
	decl := adlast.Decl{
		Name: "NoDefault",
		Version: types.Maybe[uint32]{
			Branch: types.Maybe_Nothing{
				V: struct{}{}},
		},
		Type_: adlast.DeclType{
			Branch: adlast.DeclType_Struct_{
				V: adlast.Struct{
					TypeParams: []adlast.Ident{},
					Fields: []adlast.Field{
						adlast.Field{
							Name:           "a",
							SerializedName: "a",
							TypeExpr: adlast.TypeExpr{
								TypeRef: adlast.TypeRef{
									Branch: adlast.TypeRef_Primitive{
										V: "String"},
								},
								Parameters: []adlast.TypeExpr{},
							},
							Default: types.Maybe[any]{
								Branch: types.Maybe_Nothing{
									V: struct{}{}},
							},
							Annotations: customtypes.MapMap[adlast.ScopedName, any]{},
						},
					},
				}},
		},
		Annotations: customtypes.MapMap[adlast.ScopedName, any]{},
	}
	return adlast.ScopedDecl{
		ModuleName: "decode.test01",
		Decl:       decl,
	}
}

func init() {
	goadl.RESOLVER.Register(
		adlast.ScopedName{ModuleName: "decode.test01", Name: "NoDefault"},
		AST_NoDefault(),
	)
}

func Texpr_NullableString() goadl.ATypeExpr[NullableString] {
	return goadl.ATypeExpr[NullableString]{
		Value: adlast.TypeExpr{
			TypeRef: adlast.TypeRef{
				Branch: adlast.TypeRef_Reference{
					V: adlast.ScopedName{
						ModuleName: "decode.test01",
						Name:       "NullableString",
					},
				},
			},
			Parameters: []adlast.TypeExpr{},
		},
	}
}

func AST_NullableString() adlast.ScopedDecl {
	decl := adlast.Decl{
		Name: "NullableString",
		Version: types.Maybe[uint32]{
			Branch: types.Maybe_Nothing{
				V: struct{}{}},
		},
		Type_: adlast.DeclType{
			Branch: adlast.DeclType_Struct_{
				V: adlast.Struct{
					TypeParams: []adlast.Ident{},
					Fields: []adlast.Field{
						adlast.Field{
							Name:           "a",
							SerializedName: "a",
							TypeExpr: adlast.TypeExpr{
								TypeRef: adlast.TypeRef{
									Branch: adlast.TypeRef_Primitive{
										V: "Nullable"},
								},
								Parameters: []adlast.TypeExpr{
									adlast.TypeExpr{
										TypeRef: adlast.TypeRef{
											Branch: adlast.TypeRef_Primitive{
												V: "String"},
										},
										Parameters: []adlast.TypeExpr{},
									},
								},
							},
							Default: types.Maybe[any]{
								Branch: types.Maybe_Nothing{
									V: struct{}{}},
							},
							Annotations: customtypes.MapMap[adlast.ScopedName, any]{},
						},
					},
				}},
		},
		Annotations: customtypes.MapMap[adlast.ScopedName, any]{},
	}
	return adlast.ScopedDecl{
		ModuleName: "decode.test01",
		Decl:       decl,
	}
}

func init() {
	goadl.RESOLVER.Register(
		adlast.ScopedName{ModuleName: "decode.test01", Name: "NullableString"},
		AST_NullableString(),
	)
}

func Texpr_SetTest() goadl.ATypeExpr[SetTest] {
	return goadl.ATypeExpr[SetTest]{
		Value: adlast.TypeExpr{
			TypeRef: adlast.TypeRef{
				Branch: adlast.TypeRef_Reference{
					V: adlast.ScopedName{
						ModuleName: "decode.test01",
						Name:       "SetTest",
					},
				},
			},
			Parameters: []adlast.TypeExpr{},
		},
	}
}

func AST_SetTest() adlast.ScopedDecl {
	decl := adlast.Decl{
		Name: "SetTest",
		Version: types.Maybe[uint32]{
			Branch: types.Maybe_Nothing{
				V: struct{}{}},
		},
		Type_: adlast.DeclType{
			Branch: adlast.DeclType_Struct_{
				V: adlast.Struct{
					TypeParams: []adlast.Ident{},
					Fields: []adlast.Field{
						adlast.Field{
							Name:           "my_set",
							SerializedName: "my_set",
							TypeExpr: adlast.TypeExpr{
								TypeRef: adlast.TypeRef{
									Branch: adlast.TypeRef_Reference{
										V: adlast.ScopedName{
											ModuleName: "sys.types",
											Name:       "Set",
										}},
								},
								Parameters: []adlast.TypeExpr{
									adlast.TypeExpr{
										TypeRef: adlast.TypeRef{
											Branch: adlast.TypeRef_Primitive{
												V: "String"},
										},
										Parameters: []adlast.TypeExpr{},
									},
								},
							},
							Default: types.Maybe[any]{
								Branch: types.Maybe_Just[any]{
									V: []interface{}{"a", "b", "z"}},
							},
							Annotations: customtypes.MapMap[adlast.ScopedName, any]{},
						},
					},
				}},
		},
		Annotations: customtypes.MapMap[adlast.ScopedName, any]{},
	}
	return adlast.ScopedDecl{
		ModuleName: "decode.test01",
		Decl:       decl,
	}
}

func init() {
	goadl.RESOLVER.Register(
		adlast.ScopedName{ModuleName: "decode.test01", Name: "SetTest"},
		AST_SetTest(),
	)
}

func Texpr_StringMapString() goadl.ATypeExpr[StringMapString] {
	return goadl.ATypeExpr[StringMapString]{
		Value: adlast.TypeExpr{
			TypeRef: adlast.TypeRef{
				Branch: adlast.TypeRef_Reference{
					V: adlast.ScopedName{
						ModuleName: "decode.test01",
						Name:       "StringMapString",
					},
				},
			},
			Parameters: []adlast.TypeExpr{},
		},
	}
}

func AST_StringMapString() adlast.ScopedDecl {
	decl := adlast.Decl{
		Name: "StringMapString",
		Version: types.Maybe[uint32]{
			Branch: types.Maybe_Nothing{
				V: struct{}{}},
		},
		Type_: adlast.DeclType{
			Branch: adlast.DeclType_Struct_{
				V: adlast.Struct{
					TypeParams: []adlast.Ident{},
					Fields: []adlast.Field{
						adlast.Field{
							Name:           "a",
							SerializedName: "a",
							TypeExpr: adlast.TypeExpr{
								TypeRef: adlast.TypeRef{
									Branch: adlast.TypeRef_Primitive{
										V: "StringMap"},
								},
								Parameters: []adlast.TypeExpr{
									adlast.TypeExpr{
										TypeRef: adlast.TypeRef{
											Branch: adlast.TypeRef_Primitive{
												V: "String"},
										},
										Parameters: []adlast.TypeExpr{},
									},
								},
							},
							Default: types.Maybe[any]{
								Branch: types.Maybe_Nothing{
									V: struct{}{}},
							},
							Annotations: customtypes.MapMap[adlast.ScopedName, any]{},
						},
					},
				}},
		},
		Annotations: customtypes.MapMap[adlast.ScopedName, any]{},
	}
	return adlast.ScopedDecl{
		ModuleName: "decode.test01",
		Decl:       decl,
	}
}

func init() {
	goadl.RESOLVER.Register(
		adlast.ScopedName{ModuleName: "decode.test01", Name: "StringMapString"},
		AST_StringMapString(),
	)
}

func Texpr_Uint() goadl.ATypeExpr[Uint] {
	return goadl.ATypeExpr[Uint]{
		Value: adlast.TypeExpr{
			TypeRef: adlast.TypeRef{
				Branch: adlast.TypeRef_Reference{
					V: adlast.ScopedName{
						ModuleName: "decode.test01",
						Name:       "Uint",
					},
				},
			},
			Parameters: []adlast.TypeExpr{},
		},
	}
}

func AST_Uint() adlast.ScopedDecl {
	decl := adlast.Decl{
		Name: "Uint",
		Version: types.Maybe[uint32]{
			Branch: types.Maybe_Nothing{
				V: struct{}{}},
		},
		Type_: adlast.DeclType{
			Branch: adlast.DeclType_Struct_{
				V: adlast.Struct{
					TypeParams: []adlast.Ident{},
					Fields: []adlast.Field{
						adlast.Field{
							Name:           "a",
							SerializedName: "a",
							TypeExpr: adlast.TypeExpr{
								TypeRef: adlast.TypeRef{
									Branch: adlast.TypeRef_Primitive{
										V: "Word16"},
								},
								Parameters: []adlast.TypeExpr{},
							},
							Default: types.Maybe[any]{
								Branch: types.Maybe_Nothing{
									V: struct{}{}},
							},
							Annotations: customtypes.MapMap[adlast.ScopedName, any]{},
						},
					},
				}},
		},
		Annotations: customtypes.MapMap[adlast.ScopedName, any]{},
	}
	return adlast.ScopedDecl{
		ModuleName: "decode.test01",
		Decl:       decl,
	}
}

func init() {
	goadl.RESOLVER.Register(
		adlast.ScopedName{ModuleName: "decode.test01", Name: "Uint"},
		AST_Uint(),
	)
}

func Texpr_Unit() goadl.ATypeExpr[Unit] {
	return goadl.ATypeExpr[Unit]{
		Value: adlast.TypeExpr{
			TypeRef: adlast.TypeRef{
				Branch: adlast.TypeRef_Reference{
					V: adlast.ScopedName{
						ModuleName: "decode.test01",
						Name:       "Unit",
					},
				},
			},
			Parameters: []adlast.TypeExpr{},
		},
	}
}

func AST_Unit() adlast.ScopedDecl {
	decl := adlast.Decl{
		Name: "Unit",
		Version: types.Maybe[uint32]{
			Branch: types.Maybe_Nothing{
				V: struct{}{}},
		},
		Type_: adlast.DeclType{
			Branch: adlast.DeclType_Struct_{
				V: adlast.Struct{
					TypeParams: []adlast.Ident{},
					Fields:     []adlast.Field{},
				}},
		},
		Annotations: customtypes.MapMap[adlast.ScopedName, any]{},
	}
	return adlast.ScopedDecl{
		ModuleName: "decode.test01",
		Decl:       decl,
	}
}

func init() {
	goadl.RESOLVER.Register(
		adlast.ScopedName{ModuleName: "decode.test01", Name: "Unit"},
		AST_Unit(),
	)
}

func Texpr_VectorString() goadl.ATypeExpr[VectorString] {
	return goadl.ATypeExpr[VectorString]{
		Value: adlast.TypeExpr{
			TypeRef: adlast.TypeRef{
				Branch: adlast.TypeRef_Reference{
					V: adlast.ScopedName{
						ModuleName: "decode.test01",
						Name:       "VectorString",
					},
				},
			},
			Parameters: []adlast.TypeExpr{},
		},
	}
}

func AST_VectorString() adlast.ScopedDecl {
	decl := adlast.Decl{
		Name: "VectorString",
		Version: types.Maybe[uint32]{
			Branch: types.Maybe_Nothing{
				V: struct{}{}},
		},
		Type_: adlast.DeclType{
			Branch: adlast.DeclType_Struct_{
				V: adlast.Struct{
					TypeParams: []adlast.Ident{},
					Fields: []adlast.Field{
						adlast.Field{
							Name:           "a",
							SerializedName: "a",
							TypeExpr: adlast.TypeExpr{
								TypeRef: adlast.TypeRef{
									Branch: adlast.TypeRef_Primitive{
										V: "Vector"},
								},
								Parameters: []adlast.TypeExpr{
									adlast.TypeExpr{
										TypeRef: adlast.TypeRef{
											Branch: adlast.TypeRef_Primitive{
												V: "String"},
										},
										Parameters: []adlast.TypeExpr{},
									},
								},
							},
							Default: types.Maybe[any]{
								Branch: types.Maybe_Nothing{
									V: struct{}{}},
							},
							Annotations: customtypes.MapMap[adlast.ScopedName, any]{},
						},
					},
				}},
		},
		Annotations: customtypes.MapMap[adlast.ScopedName, any]{},
	}
	return adlast.ScopedDecl{
		ModuleName: "decode.test01",
		Decl:       decl,
	}
}

func init() {
	goadl.RESOLVER.Register(
		adlast.ScopedName{ModuleName: "decode.test01", Name: "VectorString"},
		AST_VectorString(),
	)
}
