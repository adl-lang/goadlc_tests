// Code generated by goadlc v3 - DO NOT EDIT.
package simple_struct_with_default

import (
	goadl "github.com/adl-lang/goadl_rt/v3"
	"github.com/adl-lang/goadl_rt/v3/customtypes"
	"github.com/adl-lang/goadl_rt/v3/sys/adlast"
	"github.com/adl-lang/goadl_rt/v3/sys/types"
)

func Texpr_StructOfPrimitivesWithDefault() adlast.ATypeExpr[StructOfPrimitivesWithDefault] {
	te := adlast.Make_TypeExpr(
		adlast.Make_TypeRef_reference(
			adlast.Make_ScopedName("exer02.simple_struct_with_default", "StructOfPrimitivesWithDefault"),
		),
		[]adlast.TypeExpr{},
	)
	return adlast.Make_ATypeExpr[StructOfPrimitivesWithDefault](te)
}

func AST_StructOfPrimitivesWithDefault() adlast.ScopedDecl {
	decl := adlast.MakeAll_Decl(
		"StructOfPrimitivesWithDefault",
		types.Make_Maybe_nothing[uint32](),
		adlast.Make_DeclType_struct_(
			adlast.MakeAll_Struct(
				[]adlast.Ident{},
				[]adlast.Field{
					adlast.MakeAll_Field(
						"A",
						"A",
						adlast.MakeAll_TypeExpr(
							adlast.Make_TypeRef_primitive(
								"Int32",
							),
							[]adlast.TypeExpr{},
						),
						types.Make_Maybe_just[any](
							1,
						),
						customtypes.MapMap[adlast.ScopedName, any]{},
					),
					adlast.MakeAll_Field(
						"B",
						"B",
						adlast.MakeAll_TypeExpr(
							adlast.Make_TypeRef_primitive(
								"Int64",
							),
							[]adlast.TypeExpr{},
						),
						types.Make_Maybe_just[any](
							2,
						),
						customtypes.MapMap[adlast.ScopedName, any]{},
					),
					adlast.MakeAll_Field(
						"c",
						"c",
						adlast.MakeAll_TypeExpr(
							adlast.Make_TypeRef_primitive(
								"Bool",
							),
							[]adlast.TypeExpr{},
						),
						types.Make_Maybe_just[any](
							true,
						),
						customtypes.MapMap[adlast.ScopedName, any]{},
					),
					adlast.MakeAll_Field(
						"d",
						"d",
						adlast.MakeAll_TypeExpr(
							adlast.Make_TypeRef_primitive(
								"Double",
							),
							[]adlast.TypeExpr{},
						),
						types.Make_Maybe_just[any](
							1.1,
						),
						customtypes.MapMap[adlast.ScopedName, any]{},
					),
					adlast.MakeAll_Field(
						"e",
						"e",
						adlast.MakeAll_TypeExpr(
							adlast.Make_TypeRef_primitive(
								"String",
							),
							[]adlast.TypeExpr{},
						),
						types.Make_Maybe_just[any](
							"byebye",
						),
						customtypes.MapMap[adlast.ScopedName, any]{},
					),
				},
			),
		),
		customtypes.MapMap[adlast.ScopedName, any]{},
	)
	return adlast.Make_ScopedDecl("exer02.simple_struct_with_default", decl)
}

func init() {
	goadl.RESOLVER.Register(
		adlast.Make_ScopedName("exer02.simple_struct_with_default", "StructOfPrimitivesWithDefault"),
		AST_StructOfPrimitivesWithDefault(),
	)
}
