// Code generated by goadlc v3 - DO NOT EDIT.
package test31

import (
	goadl "github.com/adl-lang/goadl_rt/v3"
	"github.com/adl-lang/goadl_rt/v3/customtypes"
	"github.com/adl-lang/goadl_rt/v3/sys/adlast"
	"github.com/adl-lang/goadl_rt/v3/sys/types"
)

func Texpr_A1() adlast.ATypeExpr[A1] {
	te := adlast.Make_TypeExpr(
		adlast.Make_TypeRef_reference(
			adlast.Make_ScopedName("test31.test31", "A1"),
		),
		[]adlast.TypeExpr{},
	)
	return adlast.Make_ATypeExpr[A1](te)
}

func AST_A1() adlast.ScopedDecl {
	decl := adlast.MakeAll_Decl(
		"A1",
		types.Make_Maybe_nothing[uint32](),
		adlast.Make_DeclType_union_(
			adlast.MakeAll_Union(
				[]adlast.Ident{},
				[]adlast.Field{
					adlast.MakeAll_Field(
						"a",
						"a",
						adlast.MakeAll_TypeExpr(
							adlast.Make_TypeRef_reference(
								adlast.MakeAll_ScopedName(
									"test31.test31",
									"A2",
								),
							),
							[]adlast.TypeExpr{},
						),
						types.Make_Maybe_nothing[any](),
						customtypes.MapMap[adlast.ScopedName, any]{adlast.Make_ScopedName("sys.annotations", "TypeDiscrimination"): map[string]interface{}{"@v": 6}},
					),
				},
			),
		),
		customtypes.MapMap[adlast.ScopedName, any]{},
	)
	return adlast.Make_ScopedDecl("test31.test31", decl)
}

func init() {
	goadl.RESOLVER.Register(
		adlast.Make_ScopedName("test31.test31", "A1"),
		AST_A1(),
	)
}

func Texpr_A2() adlast.ATypeExpr[A2] {
	te := adlast.Make_TypeExpr(
		adlast.Make_TypeRef_reference(
			adlast.Make_ScopedName("test31.test31", "A2"),
		),
		[]adlast.TypeExpr{},
	)
	return adlast.Make_ATypeExpr[A2](te)
}

func AST_A2() adlast.ScopedDecl {
	decl := adlast.MakeAll_Decl(
		"A2",
		types.Make_Maybe_nothing[uint32](),
		adlast.Make_DeclType_union_(
			adlast.MakeAll_Union(
				[]adlast.Ident{},
				[]adlast.Field{
					adlast.MakeAll_Field(
						"b",
						"b",
						adlast.MakeAll_TypeExpr(
							adlast.Make_TypeRef_reference(
								adlast.MakeAll_ScopedName(
									"test31.test31",
									"A3",
								),
							),
							[]adlast.TypeExpr{},
						),
						types.Make_Maybe_nothing[any](),
						customtypes.MapMap[adlast.ScopedName, any]{adlast.Make_ScopedName("sys.annotations", "TypeDiscrimination"): map[string]interface{}{"@v": 7}},
					),
				},
			),
		),
		customtypes.MapMap[adlast.ScopedName, any]{},
	)
	return adlast.Make_ScopedDecl("test31.test31", decl)
}

func init() {
	goadl.RESOLVER.Register(
		adlast.Make_ScopedName("test31.test31", "A2"),
		AST_A2(),
	)
}

func Texpr_A3() adlast.ATypeExpr[A3] {
	te := adlast.Make_TypeExpr(
		adlast.Make_TypeRef_reference(
			adlast.Make_ScopedName("test31.test31", "A3"),
		),
		[]adlast.TypeExpr{},
	)
	return adlast.Make_ATypeExpr[A3](te)
}

func AST_A3() adlast.ScopedDecl {
	decl := adlast.MakeAll_Decl(
		"A3",
		types.Make_Maybe_nothing[uint32](),
		adlast.Make_DeclType_union_(
			adlast.MakeAll_Union(
				[]adlast.Ident{},
				[]adlast.Field{
					adlast.MakeAll_Field(
						"c",
						"c",
						adlast.MakeAll_TypeExpr(
							adlast.Make_TypeRef_reference(
								adlast.MakeAll_ScopedName(
									"test31.test31",
									"A4",
								),
							),
							[]adlast.TypeExpr{},
						),
						types.Make_Maybe_nothing[any](),
						customtypes.MapMap[adlast.ScopedName, any]{adlast.Make_ScopedName("sys.annotations", "TypeDiscrimination"): map[string]interface{}{"@v": 8}},
					),
				},
			),
		),
		customtypes.MapMap[adlast.ScopedName, any]{},
	)
	return adlast.Make_ScopedDecl("test31.test31", decl)
}

func init() {
	goadl.RESOLVER.Register(
		adlast.Make_ScopedName("test31.test31", "A3"),
		AST_A3(),
	)
}

func Texpr_A4() adlast.ATypeExpr[A4] {
	te := adlast.Make_TypeExpr(
		adlast.Make_TypeRef_reference(
			adlast.Make_ScopedName("test31.test31", "A4"),
		),
		[]adlast.TypeExpr{},
	)
	return adlast.Make_ATypeExpr[A4](te)
}

func AST_A4() adlast.ScopedDecl {
	decl := adlast.MakeAll_Decl(
		"A4",
		types.Make_Maybe_nothing[uint32](),
		adlast.Make_DeclType_union_(
			adlast.MakeAll_Union(
				[]adlast.Ident{},
				[]adlast.Field{
					adlast.MakeAll_Field(
						"d",
						"d",
						adlast.MakeAll_TypeExpr(
							adlast.Make_TypeRef_primitive(
								"String",
							),
							[]adlast.TypeExpr{},
						),
						types.Make_Maybe_nothing[any](),
						customtypes.MapMap[adlast.ScopedName, any]{adlast.Make_ScopedName("sys.annotations", "TypeDiscrimination"): map[string]interface{}{"@v": 9}},
					),
				},
			),
		),
		customtypes.MapMap[adlast.ScopedName, any]{},
	)
	return adlast.Make_ScopedDecl("test31.test31", decl)
}

func init() {
	goadl.RESOLVER.Register(
		adlast.Make_ScopedName("test31.test31", "A4"),
		AST_A4(),
	)
}

func Texpr_B1() adlast.ATypeExpr[B1] {
	te := adlast.Make_TypeExpr(
		adlast.Make_TypeRef_reference(
			adlast.Make_ScopedName("test31.test31", "B1"),
		),
		[]adlast.TypeExpr{},
	)
	return adlast.Make_ATypeExpr[B1](te)
}

func AST_B1() adlast.ScopedDecl {
	decl := adlast.MakeAll_Decl(
		"B1",
		types.Make_Maybe_nothing[uint32](),
		adlast.Make_DeclType_union_(
			adlast.MakeAll_Union(
				[]adlast.Ident{},
				[]adlast.Field{
					adlast.MakeAll_Field(
						"f1",
						"f1",
						adlast.MakeAll_TypeExpr(
							adlast.Make_TypeRef_reference(
								adlast.MakeAll_ScopedName(
									"test31.test31",
									"MyString",
								),
							),
							[]adlast.TypeExpr{},
						),
						types.Make_Maybe_nothing[any](),
						customtypes.MapMap[adlast.ScopedName, any]{adlast.Make_ScopedName("sys.annotations", "TypeDiscrimination"): map[string]interface{}{"@v": 0}},
					),
					adlast.MakeAll_Field(
						"f2",
						"f2",
						adlast.MakeAll_TypeExpr(
							adlast.Make_TypeRef_primitive(
								"Vector",
							),
							[]adlast.TypeExpr{
								adlast.MakeAll_TypeExpr(
									adlast.Make_TypeRef_reference(
										adlast.MakeAll_ScopedName(
											"test31.test31",
											"MyString",
										),
									),
									[]adlast.TypeExpr{},
								),
							},
						),
						types.Make_Maybe_nothing[any](),
						customtypes.MapMap[adlast.ScopedName, any]{adlast.Make_ScopedName("sys.annotations", "TypeDiscrimination"): map[string]interface{}{"@v": 0}},
					),
				},
			),
		),
		customtypes.MapMap[adlast.ScopedName, any]{},
	)
	return adlast.Make_ScopedDecl("test31.test31", decl)
}

func init() {
	goadl.RESOLVER.Register(
		adlast.Make_ScopedName("test31.test31", "B1"),
		AST_B1(),
	)
}

func Texpr_B2() adlast.ATypeExpr[B2] {
	te := adlast.Make_TypeExpr(
		adlast.Make_TypeRef_reference(
			adlast.Make_ScopedName("test31.test31", "B2"),
		),
		[]adlast.TypeExpr{},
	)
	return adlast.Make_ATypeExpr[B2](te)
}

func AST_B2() adlast.ScopedDecl {
	decl := adlast.MakeAll_Decl(
		"B2",
		types.Make_Maybe_nothing[uint32](),
		adlast.Make_DeclType_union_(
			adlast.MakeAll_Union(
				[]adlast.Ident{},
				[]adlast.Field{
					adlast.MakeAll_Field(
						"f3",
						"f3",
						adlast.MakeAll_TypeExpr(
							adlast.Make_TypeRef_reference(
								adlast.MakeAll_ScopedName(
									"test31.test31",
									"MyVecString",
								),
							),
							[]adlast.TypeExpr{},
						),
						types.Make_Maybe_nothing[any](),
						customtypes.MapMap[adlast.ScopedName, any]{adlast.Make_ScopedName("sys.annotations", "TypeDiscrimination"): map[string]interface{}{"@v": 0}},
					),
				},
			),
		),
		customtypes.MapMap[adlast.ScopedName, any]{},
	)
	return adlast.Make_ScopedDecl("test31.test31", decl)
}

func init() {
	goadl.RESOLVER.Register(
		adlast.Make_ScopedName("test31.test31", "B2"),
		AST_B2(),
	)
}

func Texpr_B3() adlast.ATypeExpr[B3] {
	te := adlast.Make_TypeExpr(
		adlast.Make_TypeRef_reference(
			adlast.Make_ScopedName("test31.test31", "B3"),
		),
		[]adlast.TypeExpr{},
	)
	return adlast.Make_ATypeExpr[B3](te)
}

func AST_B3() adlast.ScopedDecl {
	decl := adlast.MakeAll_Decl(
		"B3",
		types.Make_Maybe_nothing[uint32](),
		adlast.Make_DeclType_union_(
			adlast.MakeAll_Union(
				[]adlast.Ident{},
				[]adlast.Field{
					adlast.MakeAll_Field(
						"f3",
						"f3",
						adlast.MakeAll_TypeExpr(
							adlast.Make_TypeRef_reference(
								adlast.MakeAll_ScopedName(
									"test31.test31",
									"MyVecMyString",
								),
							),
							[]adlast.TypeExpr{},
						),
						types.Make_Maybe_nothing[any](),
						customtypes.MapMap[adlast.ScopedName, any]{adlast.Make_ScopedName("sys.annotations", "TypeDiscrimination"): map[string]interface{}{"@v": 0}},
					),
				},
			),
		),
		customtypes.MapMap[adlast.ScopedName, any]{},
	)
	return adlast.Make_ScopedDecl("test31.test31", decl)
}

func init() {
	goadl.RESOLVER.Register(
		adlast.Make_ScopedName("test31.test31", "B3"),
		AST_B3(),
	)
}

func Texpr_B4() adlast.ATypeExpr[B4] {
	te := adlast.Make_TypeExpr(
		adlast.Make_TypeRef_reference(
			adlast.Make_ScopedName("test31.test31", "B4"),
		),
		[]adlast.TypeExpr{},
	)
	return adlast.Make_ATypeExpr[B4](te)
}

func AST_B4() adlast.ScopedDecl {
	decl := adlast.MakeAll_Decl(
		"B4",
		types.Make_Maybe_nothing[uint32](),
		adlast.Make_DeclType_union_(
			adlast.MakeAll_Union(
				[]adlast.Ident{},
				[]adlast.Field{
					adlast.MakeAll_Field(
						"b",
						"b",
						adlast.MakeAll_TypeExpr(
							adlast.Make_TypeRef_reference(
								adlast.MakeAll_ScopedName(
									"test31.test31",
									"GenU",
								),
							),
							[]adlast.TypeExpr{
								adlast.MakeAll_TypeExpr(
									adlast.Make_TypeRef_primitive(
										"String",
									),
									[]adlast.TypeExpr{},
								),
							},
						),
						types.Make_Maybe_nothing[any](),
						customtypes.MapMap[adlast.ScopedName, any]{adlast.Make_ScopedName("sys.annotations", "TypeDiscrimination"): map[string]interface{}{"@v": 0}},
					),
				},
			),
		),
		customtypes.MapMap[adlast.ScopedName, any]{},
	)
	return adlast.Make_ScopedDecl("test31.test31", decl)
}

func init() {
	goadl.RESOLVER.Register(
		adlast.Make_ScopedName("test31.test31", "B4"),
		AST_B4(),
	)
}

func Texpr_B5() adlast.ATypeExpr[B5] {
	te := adlast.Make_TypeExpr(
		adlast.Make_TypeRef_reference(
			adlast.Make_ScopedName("test31.test31", "B5"),
		),
		[]adlast.TypeExpr{},
	)
	return adlast.Make_ATypeExpr[B5](te)
}

func AST_B5() adlast.ScopedDecl {
	decl := adlast.MakeAll_Decl(
		"B5",
		types.Make_Maybe_nothing[uint32](),
		adlast.Make_DeclType_union_(
			adlast.MakeAll_Union(
				[]adlast.Ident{},
				[]adlast.Field{
					adlast.MakeAll_Field(
						"b",
						"b",
						adlast.MakeAll_TypeExpr(
							adlast.Make_TypeRef_reference(
								adlast.MakeAll_ScopedName(
									"test31.test31",
									"MyGenUString",
								),
							),
							[]adlast.TypeExpr{},
						),
						types.Make_Maybe_nothing[any](),
						customtypes.MapMap[adlast.ScopedName, any]{adlast.Make_ScopedName("sys.annotations", "TypeDiscrimination"): map[string]interface{}{"@v": 0}},
					),
				},
			),
		),
		customtypes.MapMap[adlast.ScopedName, any]{},
	)
	return adlast.Make_ScopedDecl("test31.test31", decl)
}

func init() {
	goadl.RESOLVER.Register(
		adlast.Make_ScopedName("test31.test31", "B5"),
		AST_B5(),
	)
}

func Texpr_GenU[T any](t adlast.ATypeExpr[T]) adlast.ATypeExpr[GenU[T]] {
	te := adlast.Make_TypeExpr(
		adlast.Make_TypeRef_reference(
			adlast.Make_ScopedName("test31.test31", "GenU"),
		),
		[]adlast.TypeExpr{t.Value},
	)
	return adlast.Make_ATypeExpr[GenU[T]](te)
}

func AST_GenU() adlast.ScopedDecl {
	decl := adlast.MakeAll_Decl(
		"GenU",
		types.Make_Maybe_nothing[uint32](),
		adlast.Make_DeclType_union_(
			adlast.MakeAll_Union(
				[]adlast.Ident{
					"T",
				},
				[]adlast.Field{
					adlast.MakeAll_Field(
						"a",
						"a",
						adlast.MakeAll_TypeExpr(
							adlast.Make_TypeRef_typeParam(
								"T",
							),
							[]adlast.TypeExpr{},
						),
						types.Make_Maybe_nothing[any](),
						customtypes.MapMap[adlast.ScopedName, any]{},
					),
				},
			),
		),
		customtypes.MapMap[adlast.ScopedName, any]{},
	)
	return adlast.Make_ScopedDecl("test31.test31", decl)
}

func init() {
	goadl.RESOLVER.Register(
		adlast.Make_ScopedName("test31.test31", "GenU"),
		AST_GenU(),
	)
}

func Texpr_Measure() adlast.ATypeExpr[Measure] {
	te := adlast.Make_TypeExpr(
		adlast.Make_TypeRef_reference(
			adlast.Make_ScopedName("test31.test31", "Measure"),
		),
		[]adlast.TypeExpr{},
	)
	return adlast.Make_ATypeExpr[Measure](te)
}

func AST_Measure() adlast.ScopedDecl {
	decl := adlast.MakeAll_Decl(
		"Measure",
		types.Make_Maybe_nothing[uint32](),
		adlast.Make_DeclType_union_(
			adlast.MakeAll_Union(
				[]adlast.Ident{},
				[]adlast.Field{
					adlast.MakeAll_Field(
						"count",
						"count",
						adlast.MakeAll_TypeExpr(
							adlast.Make_TypeRef_primitive(
								"Word64",
							),
							[]adlast.TypeExpr{},
						),
						types.Make_Maybe_nothing[any](),
						customtypes.MapMap[adlast.ScopedName, any]{adlast.Make_ScopedName("sys.annotations", "TypeDiscrimination"): map[string]interface{}{"@v": 0}},
					),
					adlast.MakeAll_Field(
						"multiple",
						"multiple",
						adlast.MakeAll_TypeExpr(
							adlast.Make_TypeRef_reference(
								adlast.MakeAll_ScopedName(
									"sys.types",
									"Pair",
								),
							),
							[]adlast.TypeExpr{
								adlast.MakeAll_TypeExpr(
									adlast.Make_TypeRef_primitive(
										"Word64",
									),
									[]adlast.TypeExpr{},
								),
								adlast.MakeAll_TypeExpr(
									adlast.Make_TypeRef_primitive(
										"Double",
									),
									[]adlast.TypeExpr{},
								),
							},
						),
						types.Make_Maybe_nothing[any](),
						customtypes.MapMap[adlast.ScopedName, any]{},
					),
				},
			),
		),
		customtypes.MapMap[adlast.ScopedName, any]{},
	)
	return adlast.Make_ScopedDecl("test31.test31", decl)
}

func init() {
	goadl.RESOLVER.Register(
		adlast.Make_ScopedName("test31.test31", "Measure"),
		AST_Measure(),
	)
}

func Texpr_MyGenUString() adlast.ATypeExpr[MyGenUString] {
	te := adlast.Make_TypeExpr(
		adlast.Make_TypeRef_reference(
			adlast.Make_ScopedName("test31.test31", "MyGenUString"),
		),
		[]adlast.TypeExpr{},
	)
	return adlast.Make_ATypeExpr[MyGenUString](te)
}

func AST_MyGenUString() adlast.ScopedDecl {
	decl := adlast.MakeAll_Decl(
		"MyGenUString",
		types.Make_Maybe_nothing[uint32](),
		adlast.Make_DeclType_type_(
			adlast.MakeAll_TypeDef(
				[]adlast.Ident{},
				adlast.MakeAll_TypeExpr(
					adlast.Make_TypeRef_reference(
						adlast.MakeAll_ScopedName(
							"test31.test31",
							"GenU",
						),
					),
					[]adlast.TypeExpr{
						adlast.MakeAll_TypeExpr(
							adlast.Make_TypeRef_primitive(
								"String",
							),
							[]adlast.TypeExpr{},
						),
					},
				),
			),
		),
		customtypes.MapMap[adlast.ScopedName, any]{},
	)
	return adlast.Make_ScopedDecl("test31.test31", decl)
}

func init() {
	goadl.RESOLVER.Register(
		adlast.Make_ScopedName("test31.test31", "MyGenUString"),
		AST_MyGenUString(),
	)
}

func Texpr_MyString() adlast.ATypeExpr[MyString] {
	te := adlast.Make_TypeExpr(
		adlast.Make_TypeRef_reference(
			adlast.Make_ScopedName("test31.test31", "MyString"),
		),
		[]adlast.TypeExpr{},
	)
	return adlast.Make_ATypeExpr[MyString](te)
}

func AST_MyString() adlast.ScopedDecl {
	decl := adlast.MakeAll_Decl(
		"MyString",
		types.Make_Maybe_nothing[uint32](),
		adlast.Make_DeclType_type_(
			adlast.MakeAll_TypeDef(
				[]adlast.Ident{},
				adlast.MakeAll_TypeExpr(
					adlast.Make_TypeRef_primitive(
						"String",
					),
					[]adlast.TypeExpr{},
				),
			),
		),
		customtypes.MapMap[adlast.ScopedName, any]{},
	)
	return adlast.Make_ScopedDecl("test31.test31", decl)
}

func init() {
	goadl.RESOLVER.Register(
		adlast.Make_ScopedName("test31.test31", "MyString"),
		AST_MyString(),
	)
}

func Texpr_MyStructV1() adlast.ATypeExpr[MyStructV1] {
	te := adlast.Make_TypeExpr(
		adlast.Make_TypeRef_reference(
			adlast.Make_ScopedName("test31.test31", "MyStructV1"),
		),
		[]adlast.TypeExpr{},
	)
	return adlast.Make_ATypeExpr[MyStructV1](te)
}

func AST_MyStructV1() adlast.ScopedDecl {
	decl := adlast.MakeAll_Decl(
		"MyStructV1",
		types.Make_Maybe_nothing[uint32](),
		adlast.Make_DeclType_struct_(
			adlast.MakeAll_Struct(
				[]adlast.Ident{},
				[]adlast.Field{
					adlast.MakeAll_Field(
						"quantity",
						"quantity",
						adlast.MakeAll_TypeExpr(
							adlast.Make_TypeRef_primitive(
								"Word64",
							),
							[]adlast.TypeExpr{},
						),
						types.Make_Maybe_nothing[any](),
						customtypes.MapMap[adlast.ScopedName, any]{},
					),
				},
			),
		),
		customtypes.MapMap[adlast.ScopedName, any]{},
	)
	return adlast.Make_ScopedDecl("test31.test31", decl)
}

func init() {
	goadl.RESOLVER.Register(
		adlast.Make_ScopedName("test31.test31", "MyStructV1"),
		AST_MyStructV1(),
	)
}

func Texpr_MyStructV2() adlast.ATypeExpr[MyStructV2] {
	te := adlast.Make_TypeExpr(
		adlast.Make_TypeRef_reference(
			adlast.Make_ScopedName("test31.test31", "MyStructV2"),
		),
		[]adlast.TypeExpr{},
	)
	return adlast.Make_ATypeExpr[MyStructV2](te)
}

func AST_MyStructV2() adlast.ScopedDecl {
	decl := adlast.MakeAll_Decl(
		"MyStructV2",
		types.Make_Maybe_nothing[uint32](),
		adlast.Make_DeclType_struct_(
			adlast.MakeAll_Struct(
				[]adlast.Ident{},
				[]adlast.Field{
					adlast.MakeAll_Field(
						"quantity",
						"quantity",
						adlast.MakeAll_TypeExpr(
							adlast.Make_TypeRef_reference(
								adlast.MakeAll_ScopedName(
									"test31.test31",
									"Measure",
								),
							),
							[]adlast.TypeExpr{},
						),
						types.Make_Maybe_nothing[any](),
						customtypes.MapMap[adlast.ScopedName, any]{},
					),
				},
			),
		),
		customtypes.MapMap[adlast.ScopedName, any]{},
	)
	return adlast.Make_ScopedDecl("test31.test31", decl)
}

func init() {
	goadl.RESOLVER.Register(
		adlast.Make_ScopedName("test31.test31", "MyStructV2"),
		AST_MyStructV2(),
	)
}

func Texpr_MyVecMyString() adlast.ATypeExpr[MyVecMyString] {
	te := adlast.Make_TypeExpr(
		adlast.Make_TypeRef_reference(
			adlast.Make_ScopedName("test31.test31", "MyVecMyString"),
		),
		[]adlast.TypeExpr{},
	)
	return adlast.Make_ATypeExpr[MyVecMyString](te)
}

func AST_MyVecMyString() adlast.ScopedDecl {
	decl := adlast.MakeAll_Decl(
		"MyVecMyString",
		types.Make_Maybe_nothing[uint32](),
		adlast.Make_DeclType_type_(
			adlast.MakeAll_TypeDef(
				[]adlast.Ident{},
				adlast.MakeAll_TypeExpr(
					adlast.Make_TypeRef_primitive(
						"Vector",
					),
					[]adlast.TypeExpr{
						adlast.MakeAll_TypeExpr(
							adlast.Make_TypeRef_reference(
								adlast.MakeAll_ScopedName(
									"test31.test31",
									"MyString",
								),
							),
							[]adlast.TypeExpr{},
						),
					},
				),
			),
		),
		customtypes.MapMap[adlast.ScopedName, any]{},
	)
	return adlast.Make_ScopedDecl("test31.test31", decl)
}

func init() {
	goadl.RESOLVER.Register(
		adlast.Make_ScopedName("test31.test31", "MyVecMyString"),
		AST_MyVecMyString(),
	)
}

func Texpr_MyVecString() adlast.ATypeExpr[MyVecString] {
	te := adlast.Make_TypeExpr(
		adlast.Make_TypeRef_reference(
			adlast.Make_ScopedName("test31.test31", "MyVecString"),
		),
		[]adlast.TypeExpr{},
	)
	return adlast.Make_ATypeExpr[MyVecString](te)
}

func AST_MyVecString() adlast.ScopedDecl {
	decl := adlast.MakeAll_Decl(
		"MyVecString",
		types.Make_Maybe_nothing[uint32](),
		adlast.Make_DeclType_type_(
			adlast.MakeAll_TypeDef(
				[]adlast.Ident{},
				adlast.MakeAll_TypeExpr(
					adlast.Make_TypeRef_primitive(
						"Vector",
					),
					[]adlast.TypeExpr{
						adlast.MakeAll_TypeExpr(
							adlast.Make_TypeRef_primitive(
								"String",
							),
							[]adlast.TypeExpr{},
						),
					},
				),
			),
		),
		customtypes.MapMap[adlast.ScopedName, any]{},
	)
	return adlast.Make_ScopedDecl("test31.test31", decl)
}

func init() {
	goadl.RESOLVER.Register(
		adlast.Make_ScopedName("test31.test31", "MyVecString"),
		AST_MyVecString(),
	)
}

func Texpr_NullableTest() adlast.ATypeExpr[NullableTest] {
	te := adlast.Make_TypeExpr(
		adlast.Make_TypeRef_reference(
			adlast.Make_ScopedName("test31.test31", "NullableTest"),
		),
		[]adlast.TypeExpr{},
	)
	return adlast.Make_ATypeExpr[NullableTest](te)
}

func AST_NullableTest() adlast.ScopedDecl {
	decl := adlast.MakeAll_Decl(
		"NullableTest",
		types.Make_Maybe_nothing[uint32](),
		adlast.Make_DeclType_union_(
			adlast.MakeAll_Union(
				[]adlast.Ident{},
				[]adlast.Field{
					adlast.MakeAll_Field(
						"a",
						"a",
						adlast.MakeAll_TypeExpr(
							adlast.Make_TypeRef_primitive(
								"Nullable",
							),
							[]adlast.TypeExpr{
								adlast.MakeAll_TypeExpr(
									adlast.Make_TypeRef_primitive(
										"String",
									),
									[]adlast.TypeExpr{},
								),
							},
						),
						types.Make_Maybe_nothing[any](),
						customtypes.MapMap[adlast.ScopedName, any]{adlast.Make_ScopedName("sys.annotations", "TypeDiscrimination"): map[string]interface{}{"@v": 0}},
					),
					adlast.MakeAll_Field(
						"b",
						"b",
						adlast.MakeAll_TypeExpr(
							adlast.Make_TypeRef_primitive(
								"Void",
							),
							[]adlast.TypeExpr{},
						),
						types.Make_Maybe_nothing[any](),
						customtypes.MapMap[adlast.ScopedName, any]{},
					),
				},
			),
		),
		customtypes.MapMap[adlast.ScopedName, any]{},
	)
	return adlast.Make_ScopedDecl("test31.test31", decl)
}

func init() {
	goadl.RESOLVER.Register(
		adlast.Make_ScopedName("test31.test31", "NullableTest"),
		AST_NullableTest(),
	)
}

func Texpr_S1() adlast.ATypeExpr[S1] {
	te := adlast.Make_TypeExpr(
		adlast.Make_TypeRef_reference(
			adlast.Make_ScopedName("test31.test31", "S1"),
		),
		[]adlast.TypeExpr{},
	)
	return adlast.Make_ATypeExpr[S1](te)
}

func AST_S1() adlast.ScopedDecl {
	decl := adlast.MakeAll_Decl(
		"S1",
		types.Make_Maybe_nothing[uint32](),
		adlast.Make_DeclType_struct_(
			adlast.MakeAll_Struct(
				[]adlast.Ident{},
				[]adlast.Field{
					adlast.MakeAll_Field(
						"quant",
						"quant",
						adlast.MakeAll_TypeExpr(
							adlast.Make_TypeRef_primitive(
								"Word64",
							),
							[]adlast.TypeExpr{},
						),
						types.Make_Maybe_nothing[any](),
						customtypes.MapMap[adlast.ScopedName, any]{},
					),
					adlast.MakeAll_Field(
						"value",
						"value",
						adlast.MakeAll_TypeExpr(
							adlast.Make_TypeRef_primitive(
								"Double",
							),
							[]adlast.TypeExpr{},
						),
						types.Make_Maybe_nothing[any](),
						customtypes.MapMap[adlast.ScopedName, any]{},
					),
				},
			),
		),
		customtypes.MapMap[adlast.ScopedName, any]{},
	)
	return adlast.Make_ScopedDecl("test31.test31", decl)
}

func init() {
	goadl.RESOLVER.Register(
		adlast.Make_ScopedName("test31.test31", "S1"),
		AST_S1(),
	)
}

func Texpr_Struct02Test() adlast.ATypeExpr[Struct02Test] {
	te := adlast.Make_TypeExpr(
		adlast.Make_TypeRef_reference(
			adlast.Make_ScopedName("test31.test31", "Struct02Test"),
		),
		[]adlast.TypeExpr{},
	)
	return adlast.Make_ATypeExpr[Struct02Test](te)
}

func AST_Struct02Test() adlast.ScopedDecl {
	decl := adlast.MakeAll_Decl(
		"Struct02Test",
		types.Make_Maybe_nothing[uint32](),
		adlast.Make_DeclType_union_(
			adlast.MakeAll_Union(
				[]adlast.Ident{},
				[]adlast.Field{
					adlast.MakeAll_Field(
						"u1",
						"u1",
						adlast.MakeAll_TypeExpr(
							adlast.Make_TypeRef_reference(
								adlast.MakeAll_ScopedName(
									"test31.test31",
									"U1",
								),
							),
							[]adlast.TypeExpr{},
						),
						types.Make_Maybe_nothing[any](),
						customtypes.MapMap[adlast.ScopedName, any]{adlast.Make_ScopedName("sys.annotations", "TypeDiscrimination"): map[string]interface{}{"@v": 0}},
					),
					adlast.MakeAll_Field(
						"s1",
						"s1",
						adlast.MakeAll_TypeExpr(
							adlast.Make_TypeRef_reference(
								adlast.MakeAll_ScopedName(
									"test31.test31",
									"S1",
								),
							),
							[]adlast.TypeExpr{},
						),
						types.Make_Maybe_nothing[any](),
						customtypes.MapMap[adlast.ScopedName, any]{adlast.Make_ScopedName("sys.annotations", "TypeDiscrimination"): map[string]interface{}{"@v": 0}},
					),
				},
			),
		),
		customtypes.MapMap[adlast.ScopedName, any]{},
	)
	return adlast.Make_ScopedDecl("test31.test31", decl)
}

func init() {
	goadl.RESOLVER.Register(
		adlast.Make_ScopedName("test31.test31", "Struct02Test"),
		AST_Struct02Test(),
	)
}

func Texpr_StructTest() adlast.ATypeExpr[StructTest] {
	te := adlast.Make_TypeExpr(
		adlast.Make_TypeRef_reference(
			adlast.Make_ScopedName("test31.test31", "StructTest"),
		),
		[]adlast.TypeExpr{},
	)
	return adlast.Make_ATypeExpr[StructTest](te)
}

func AST_StructTest() adlast.ScopedDecl {
	decl := adlast.MakeAll_Decl(
		"StructTest",
		types.Make_Maybe_nothing[uint32](),
		adlast.Make_DeclType_union_(
			adlast.MakeAll_Union(
				[]adlast.Ident{},
				[]adlast.Field{
					adlast.MakeAll_Field(
						"abc",
						"abc",
						adlast.MakeAll_TypeExpr(
							adlast.Make_TypeRef_reference(
								adlast.MakeAll_ScopedName(
									"test31.test31",
									"S1",
								),
							),
							[]adlast.TypeExpr{},
						),
						types.Make_Maybe_nothing[any](),
						customtypes.MapMap[adlast.ScopedName, any]{adlast.Make_ScopedName("sys.annotations", "TypeDiscrimination"): map[string]interface{}{"@v": 0}},
					),
					adlast.MakeAll_Field(
						"def",
						"def",
						adlast.MakeAll_TypeExpr(
							adlast.Make_TypeRef_reference(
								adlast.MakeAll_ScopedName(
									"test31.test31",
									"S1",
								),
							),
							[]adlast.TypeExpr{},
						),
						types.Make_Maybe_nothing[any](),
						customtypes.MapMap[adlast.ScopedName, any]{},
					),
				},
			),
		),
		customtypes.MapMap[adlast.ScopedName, any]{},
	)
	return adlast.Make_ScopedDecl("test31.test31", decl)
}

func init() {
	goadl.RESOLVER.Register(
		adlast.Make_ScopedName("test31.test31", "StructTest"),
		AST_StructTest(),
	)
}

func Texpr_U1() adlast.ATypeExpr[U1] {
	te := adlast.Make_TypeExpr(
		adlast.Make_TypeRef_reference(
			adlast.Make_ScopedName("test31.test31", "U1"),
		),
		[]adlast.TypeExpr{},
	)
	return adlast.Make_ATypeExpr[U1](te)
}

func AST_U1() adlast.ScopedDecl {
	decl := adlast.MakeAll_Decl(
		"U1",
		types.Make_Maybe_nothing[uint32](),
		adlast.Make_DeclType_union_(
			adlast.MakeAll_Union(
				[]adlast.Ident{},
				[]adlast.Field{
					adlast.MakeAll_Field(
						"a",
						"a",
						adlast.MakeAll_TypeExpr(
							adlast.Make_TypeRef_primitive(
								"String",
							),
							[]adlast.TypeExpr{},
						),
						types.Make_Maybe_nothing[any](),
						customtypes.MapMap[adlast.ScopedName, any]{adlast.Make_ScopedName("sys.annotations", "TypeDiscrimination"): map[string]interface{}{"@v": 3}},
					),
					adlast.MakeAll_Field(
						"b",
						"b",
						adlast.MakeAll_TypeExpr(
							adlast.Make_TypeRef_primitive(
								"Int64",
							),
							[]adlast.TypeExpr{},
						),
						types.Make_Maybe_nothing[any](),
						customtypes.MapMap[adlast.ScopedName, any]{},
					),
				},
			),
		),
		customtypes.MapMap[adlast.ScopedName, any]{},
	)
	return adlast.Make_ScopedDecl("test31.test31", decl)
}

func init() {
	goadl.RESOLVER.Register(
		adlast.Make_ScopedName("test31.test31", "U1"),
		AST_U1(),
	)
}

func Texpr_UTypeDiscriminationofMaybe() adlast.ATypeExpr[UTypeDiscriminationofMaybe] {
	te := adlast.Make_TypeExpr(
		adlast.Make_TypeRef_reference(
			adlast.Make_ScopedName("test31.test31", "UTypeDiscriminationofMaybe"),
		),
		[]adlast.TypeExpr{},
	)
	return adlast.Make_ATypeExpr[UTypeDiscriminationofMaybe](te)
}

func AST_UTypeDiscriminationofMaybe() adlast.ScopedDecl {
	decl := adlast.MakeAll_Decl(
		"UTypeDiscriminationofMaybe",
		types.Make_Maybe_nothing[uint32](),
		adlast.Make_DeclType_union_(
			adlast.MakeAll_Union(
				[]adlast.Ident{},
				[]adlast.Field{
					adlast.MakeAll_Field(
						"a",
						"a",
						adlast.MakeAll_TypeExpr(
							adlast.Make_TypeRef_reference(
								adlast.MakeAll_ScopedName(
									"sys.types",
									"Maybe",
								),
							),
							[]adlast.TypeExpr{
								adlast.MakeAll_TypeExpr(
									adlast.Make_TypeRef_reference(
										adlast.MakeAll_ScopedName(
											"test31.test31",
											"UnionUnion",
										),
									),
									[]adlast.TypeExpr{},
								),
							},
						),
						types.Make_Maybe_nothing[any](),
						customtypes.MapMap[adlast.ScopedName, any]{adlast.Make_ScopedName("sys.annotations", "TypeDiscrimination"): map[string]interface{}{"@v": 0}},
					),
				},
			),
		),
		customtypes.MapMap[adlast.ScopedName, any]{},
	)
	return adlast.Make_ScopedDecl("test31.test31", decl)
}

func init() {
	goadl.RESOLVER.Register(
		adlast.Make_ScopedName("test31.test31", "UTypeDiscriminationofMaybe"),
		AST_UTypeDiscriminationofMaybe(),
	)
}

func Texpr_Ua() adlast.ATypeExpr[Ua] {
	te := adlast.Make_TypeExpr(
		adlast.Make_TypeRef_reference(
			adlast.Make_ScopedName("test31.test31", "Ua"),
		),
		[]adlast.TypeExpr{},
	)
	return adlast.Make_ATypeExpr[Ua](te)
}

func AST_Ua() adlast.ScopedDecl {
	decl := adlast.MakeAll_Decl(
		"Ua",
		types.Make_Maybe_nothing[uint32](),
		adlast.Make_DeclType_union_(
			adlast.MakeAll_Union(
				[]adlast.Ident{},
				[]adlast.Field{
					adlast.MakeAll_Field(
						"u_b",
						"u_b",
						adlast.MakeAll_TypeExpr(
							adlast.Make_TypeRef_primitive(
								"Vector",
							),
							[]adlast.TypeExpr{
								adlast.MakeAll_TypeExpr(
									adlast.Make_TypeRef_reference(
										adlast.MakeAll_ScopedName(
											"test31.test31",
											"Ub",
										),
									),
									[]adlast.TypeExpr{},
								),
							},
						),
						types.Make_Maybe_nothing[any](),
						customtypes.MapMap[adlast.ScopedName, any]{},
					),
				},
			),
		),
		customtypes.MapMap[adlast.ScopedName, any]{},
	)
	return adlast.Make_ScopedDecl("test31.test31", decl)
}

func init() {
	goadl.RESOLVER.Register(
		adlast.Make_ScopedName("test31.test31", "Ua"),
		AST_Ua(),
	)
}

func Texpr_Ub() adlast.ATypeExpr[Ub] {
	te := adlast.Make_TypeExpr(
		adlast.Make_TypeRef_reference(
			adlast.Make_ScopedName("test31.test31", "Ub"),
		),
		[]adlast.TypeExpr{},
	)
	return adlast.Make_ATypeExpr[Ub](te)
}

func AST_Ub() adlast.ScopedDecl {
	decl := adlast.MakeAll_Decl(
		"Ub",
		types.Make_Maybe_nothing[uint32](),
		adlast.Make_DeclType_union_(
			adlast.MakeAll_Union(
				[]adlast.Ident{},
				[]adlast.Field{
					adlast.MakeAll_Field(
						"u_c",
						"u_c",
						adlast.MakeAll_TypeExpr(
							adlast.Make_TypeRef_primitive(
								"Vector",
							),
							[]adlast.TypeExpr{
								adlast.MakeAll_TypeExpr(
									adlast.Make_TypeRef_reference(
										adlast.MakeAll_ScopedName(
											"test31.test31",
											"Uc",
										),
									),
									[]adlast.TypeExpr{},
								),
							},
						),
						types.Make_Maybe_nothing[any](),
						customtypes.MapMap[adlast.ScopedName, any]{},
					),
				},
			),
		),
		customtypes.MapMap[adlast.ScopedName, any]{},
	)
	return adlast.Make_ScopedDecl("test31.test31", decl)
}

func init() {
	goadl.RESOLVER.Register(
		adlast.Make_ScopedName("test31.test31", "Ub"),
		AST_Ub(),
	)
}

func Texpr_Uc() adlast.ATypeExpr[Uc] {
	te := adlast.Make_TypeExpr(
		adlast.Make_TypeRef_reference(
			adlast.Make_ScopedName("test31.test31", "Uc"),
		),
		[]adlast.TypeExpr{},
	)
	return adlast.Make_ATypeExpr[Uc](te)
}

func AST_Uc() adlast.ScopedDecl {
	decl := adlast.MakeAll_Decl(
		"Uc",
		types.Make_Maybe_nothing[uint32](),
		adlast.Make_DeclType_union_(
			adlast.MakeAll_Union(
				[]adlast.Ident{},
				[]adlast.Field{
					adlast.MakeAll_Field(
						"a",
						"a",
						adlast.MakeAll_TypeExpr(
							adlast.Make_TypeRef_primitive(
								"Vector",
							),
							[]adlast.TypeExpr{
								adlast.MakeAll_TypeExpr(
									adlast.Make_TypeRef_primitive(
										"String",
									),
									[]adlast.TypeExpr{},
								),
							},
						),
						types.Make_Maybe_nothing[any](),
						customtypes.MapMap[adlast.ScopedName, any]{adlast.Make_ScopedName("sys.annotations", "TypeDiscrimination"): map[string]interface{}{"@v": 0}},
					),
				},
			),
		),
		customtypes.MapMap[adlast.ScopedName, any]{},
	)
	return adlast.Make_ScopedDecl("test31.test31", decl)
}

func init() {
	goadl.RESOLVER.Register(
		adlast.Make_ScopedName("test31.test31", "Uc"),
		AST_Uc(),
	)
}

func Texpr_UnionOfLiftedUnion() adlast.ATypeExpr[UnionOfLiftedUnion] {
	te := adlast.Make_TypeExpr(
		adlast.Make_TypeRef_reference(
			adlast.Make_ScopedName("test31.test31", "UnionOfLiftedUnion"),
		),
		[]adlast.TypeExpr{},
	)
	return adlast.Make_ATypeExpr[UnionOfLiftedUnion](te)
}

func AST_UnionOfLiftedUnion() adlast.ScopedDecl {
	decl := adlast.MakeAll_Decl(
		"UnionOfLiftedUnion",
		types.Make_Maybe_nothing[uint32](),
		adlast.Make_DeclType_union_(
			adlast.MakeAll_Union(
				[]adlast.Ident{},
				[]adlast.Field{
					adlast.MakeAll_Field(
						"abc",
						"abc",
						adlast.MakeAll_TypeExpr(
							adlast.Make_TypeRef_reference(
								adlast.MakeAll_ScopedName(
									"test31.test31",
									"UnionOfLiftedUnion",
								),
							),
							[]adlast.TypeExpr{},
						),
						types.Make_Maybe_nothing[any](),
						customtypes.MapMap[adlast.ScopedName, any]{adlast.Make_ScopedName("sys.annotations", "TypeDiscrimination"): map[string]interface{}{"@v": 0}},
					),
					adlast.MakeAll_Field(
						"def",
						"def",
						adlast.MakeAll_TypeExpr(
							adlast.Make_TypeRef_reference(
								adlast.MakeAll_ScopedName(
									"test31.test31",
									"S1",
								),
							),
							[]adlast.TypeExpr{},
						),
						types.Make_Maybe_nothing[any](),
						customtypes.MapMap[adlast.ScopedName, any]{},
					),
				},
			),
		),
		customtypes.MapMap[adlast.ScopedName, any]{},
	)
	return adlast.Make_ScopedDecl("test31.test31", decl)
}

func init() {
	goadl.RESOLVER.Register(
		adlast.Make_ScopedName("test31.test31", "UnionOfLiftedUnion"),
		AST_UnionOfLiftedUnion(),
	)
}

func Texpr_UnionOfVectorOfTypeDiscriminationUnionTest() adlast.ATypeExpr[UnionOfVectorOfTypeDiscriminationUnionTest] {
	te := adlast.Make_TypeExpr(
		adlast.Make_TypeRef_reference(
			adlast.Make_ScopedName("test31.test31", "UnionOfVectorOfTypeDiscriminationUnionTest"),
		),
		[]adlast.TypeExpr{},
	)
	return adlast.Make_ATypeExpr[UnionOfVectorOfTypeDiscriminationUnionTest](te)
}

func AST_UnionOfVectorOfTypeDiscriminationUnionTest() adlast.ScopedDecl {
	decl := adlast.MakeAll_Decl(
		"UnionOfVectorOfTypeDiscriminationUnionTest",
		types.Make_Maybe_nothing[uint32](),
		adlast.Make_DeclType_union_(
			adlast.MakeAll_Union(
				[]adlast.Ident{},
				[]adlast.Field{
					adlast.MakeAll_Field(
						"b",
						"b",
						adlast.MakeAll_TypeExpr(
							adlast.Make_TypeRef_primitive(
								"Vector",
							),
							[]adlast.TypeExpr{
								adlast.MakeAll_TypeExpr(
									adlast.Make_TypeRef_reference(
										adlast.MakeAll_ScopedName(
											"test31.test31",
											"Struct02Test",
										),
									),
									[]adlast.TypeExpr{},
								),
							},
						),
						types.Make_Maybe_nothing[any](),
						customtypes.MapMap[adlast.ScopedName, any]{adlast.Make_ScopedName("sys.annotations", "TypeDiscrimination"): map[string]interface{}{"@v": 0}},
					),
				},
			),
		),
		customtypes.MapMap[adlast.ScopedName, any]{},
	)
	return adlast.Make_ScopedDecl("test31.test31", decl)
}

func init() {
	goadl.RESOLVER.Register(
		adlast.Make_ScopedName("test31.test31", "UnionOfVectorOfTypeDiscriminationUnionTest"),
		AST_UnionOfVectorOfTypeDiscriminationUnionTest(),
	)
}

func Texpr_UnionUnion() adlast.ATypeExpr[UnionUnion] {
	te := adlast.Make_TypeExpr(
		adlast.Make_TypeRef_reference(
			adlast.Make_ScopedName("test31.test31", "UnionUnion"),
		),
		[]adlast.TypeExpr{},
	)
	return adlast.Make_ATypeExpr[UnionUnion](te)
}

func AST_UnionUnion() adlast.ScopedDecl {
	decl := adlast.MakeAll_Decl(
		"UnionUnion",
		types.Make_Maybe_nothing[uint32](),
		adlast.Make_DeclType_union_(
			adlast.MakeAll_Union(
				[]adlast.Ident{},
				[]adlast.Field{
					adlast.MakeAll_Field(
						"abc",
						"abc",
						adlast.MakeAll_TypeExpr(
							adlast.Make_TypeRef_reference(
								adlast.MakeAll_ScopedName(
									"test31.test31",
									"U1",
								),
							),
							[]adlast.TypeExpr{},
						),
						types.Make_Maybe_nothing[any](),
						customtypes.MapMap[adlast.ScopedName, any]{adlast.Make_ScopedName("sys.annotations", "TypeDiscrimination"): map[string]interface{}{"@v": 1}},
					),
					adlast.MakeAll_Field(
						"def",
						"def",
						adlast.MakeAll_TypeExpr(
							adlast.Make_TypeRef_reference(
								adlast.MakeAll_ScopedName(
									"test31.test31",
									"S1",
								),
							),
							[]adlast.TypeExpr{},
						),
						types.Make_Maybe_nothing[any](),
						customtypes.MapMap[adlast.ScopedName, any]{},
					),
				},
			),
		),
		customtypes.MapMap[adlast.ScopedName, any]{},
	)
	return adlast.Make_ScopedDecl("test31.test31", decl)
}

func init() {
	goadl.RESOLVER.Register(
		adlast.Make_ScopedName("test31.test31", "UnionUnion"),
		AST_UnionUnion(),
	)
}

func Texpr_UofMaybe() adlast.ATypeExpr[UofMaybe] {
	te := adlast.Make_TypeExpr(
		adlast.Make_TypeRef_reference(
			adlast.Make_ScopedName("test31.test31", "UofMaybe"),
		),
		[]adlast.TypeExpr{},
	)
	return adlast.Make_ATypeExpr[UofMaybe](te)
}

func AST_UofMaybe() adlast.ScopedDecl {
	decl := adlast.MakeAll_Decl(
		"UofMaybe",
		types.Make_Maybe_nothing[uint32](),
		adlast.Make_DeclType_union_(
			adlast.MakeAll_Union(
				[]adlast.Ident{},
				[]adlast.Field{
					adlast.MakeAll_Field(
						"a",
						"a",
						adlast.MakeAll_TypeExpr(
							adlast.Make_TypeRef_reference(
								adlast.MakeAll_ScopedName(
									"sys.types",
									"Maybe",
								),
							),
							[]adlast.TypeExpr{
								adlast.MakeAll_TypeExpr(
									adlast.Make_TypeRef_reference(
										adlast.MakeAll_ScopedName(
											"test31.test31",
											"UnionUnion",
										),
									),
									[]adlast.TypeExpr{},
								),
							},
						),
						types.Make_Maybe_nothing[any](),
						customtypes.MapMap[adlast.ScopedName, any]{},
					),
				},
			),
		),
		customtypes.MapMap[adlast.ScopedName, any]{},
	)
	return adlast.Make_ScopedDecl("test31.test31", decl)
}

func init() {
	goadl.RESOLVER.Register(
		adlast.Make_ScopedName("test31.test31", "UofMaybe"),
		AST_UofMaybe(),
	)
}

func Texpr_VectorErrorTest() adlast.ATypeExpr[VectorErrorTest] {
	te := adlast.Make_TypeExpr(
		adlast.Make_TypeRef_reference(
			adlast.Make_ScopedName("test31.test31", "VectorErrorTest"),
		),
		[]adlast.TypeExpr{},
	)
	return adlast.Make_ATypeExpr[VectorErrorTest](te)
}

func AST_VectorErrorTest() adlast.ScopedDecl {
	decl := adlast.MakeAll_Decl(
		"VectorErrorTest",
		types.Make_Maybe_nothing[uint32](),
		adlast.Make_DeclType_union_(
			adlast.MakeAll_Union(
				[]adlast.Ident{},
				[]adlast.Field{
					adlast.MakeAll_Field(
						"a",
						"a",
						adlast.MakeAll_TypeExpr(
							adlast.Make_TypeRef_primitive(
								"Vector",
							),
							[]adlast.TypeExpr{
								adlast.MakeAll_TypeExpr(
									adlast.Make_TypeRef_primitive(
										"String",
									),
									[]adlast.TypeExpr{},
								),
							},
						),
						types.Make_Maybe_nothing[any](),
						customtypes.MapMap[adlast.ScopedName, any]{adlast.Make_ScopedName("sys.annotations", "TypeDiscrimination"): map[string]interface{}{"@v": 0}},
					),
					adlast.MakeAll_Field(
						"b",
						"b",
						adlast.MakeAll_TypeExpr(
							adlast.Make_TypeRef_primitive(
								"Vector",
							),
							[]adlast.TypeExpr{
								adlast.MakeAll_TypeExpr(
									adlast.Make_TypeRef_reference(
										adlast.MakeAll_ScopedName(
											"test31.test31",
											"Struct02Test",
										),
									),
									[]adlast.TypeExpr{},
								),
							},
						),
						types.Make_Maybe_nothing[any](),
						customtypes.MapMap[adlast.ScopedName, any]{adlast.Make_ScopedName("sys.annotations", "TypeDiscrimination"): map[string]interface{}{"@v": 0}},
					),
				},
			),
		),
		customtypes.MapMap[adlast.ScopedName, any]{},
	)
	return adlast.Make_ScopedDecl("test31.test31", decl)
}

func init() {
	goadl.RESOLVER.Register(
		adlast.Make_ScopedName("test31.test31", "VectorErrorTest"),
		AST_VectorErrorTest(),
	)
}

func Texpr_VectorOfTypeDiscriminationUnionTest() adlast.ATypeExpr[VectorOfTypeDiscriminationUnionTest] {
	te := adlast.Make_TypeExpr(
		adlast.Make_TypeRef_reference(
			adlast.Make_ScopedName("test31.test31", "VectorOfTypeDiscriminationUnionTest"),
		),
		[]adlast.TypeExpr{},
	)
	return adlast.Make_ATypeExpr[VectorOfTypeDiscriminationUnionTest](te)
}

func AST_VectorOfTypeDiscriminationUnionTest() adlast.ScopedDecl {
	decl := adlast.MakeAll_Decl(
		"VectorOfTypeDiscriminationUnionTest",
		types.Make_Maybe_nothing[uint32](),
		adlast.Make_DeclType_union_(
			adlast.MakeAll_Union(
				[]adlast.Ident{},
				[]adlast.Field{
					adlast.MakeAll_Field(
						"b",
						"b",
						adlast.MakeAll_TypeExpr(
							adlast.Make_TypeRef_primitive(
								"Vector",
							),
							[]adlast.TypeExpr{
								adlast.MakeAll_TypeExpr(
									adlast.Make_TypeRef_reference(
										adlast.MakeAll_ScopedName(
											"test31.test31",
											"Struct02Test",
										),
									),
									[]adlast.TypeExpr{},
								),
							},
						),
						types.Make_Maybe_nothing[any](),
						customtypes.MapMap[adlast.ScopedName, any]{},
					),
				},
			),
		),
		customtypes.MapMap[adlast.ScopedName, any]{},
	)
	return adlast.Make_ScopedDecl("test31.test31", decl)
}

func init() {
	goadl.RESOLVER.Register(
		adlast.Make_ScopedName("test31.test31", "VectorOfTypeDiscriminationUnionTest"),
		AST_VectorOfTypeDiscriminationUnionTest(),
	)
}

func Texpr_VectorTest() adlast.ATypeExpr[VectorTest] {
	te := adlast.Make_TypeExpr(
		adlast.Make_TypeRef_reference(
			adlast.Make_ScopedName("test31.test31", "VectorTest"),
		),
		[]adlast.TypeExpr{},
	)
	return adlast.Make_ATypeExpr[VectorTest](te)
}

func AST_VectorTest() adlast.ScopedDecl {
	decl := adlast.MakeAll_Decl(
		"VectorTest",
		types.Make_Maybe_nothing[uint32](),
		adlast.Make_DeclType_union_(
			adlast.MakeAll_Union(
				[]adlast.Ident{},
				[]adlast.Field{
					adlast.MakeAll_Field(
						"a",
						"a",
						adlast.MakeAll_TypeExpr(
							adlast.Make_TypeRef_primitive(
								"Vector",
							),
							[]adlast.TypeExpr{
								adlast.MakeAll_TypeExpr(
									adlast.Make_TypeRef_primitive(
										"String",
									),
									[]adlast.TypeExpr{},
								),
							},
						),
						types.Make_Maybe_nothing[any](),
						customtypes.MapMap[adlast.ScopedName, any]{adlast.Make_ScopedName("sys.annotations", "TypeDiscrimination"): map[string]interface{}{"@v": 0}},
					),
					adlast.MakeAll_Field(
						"b",
						"b",
						adlast.MakeAll_TypeExpr(
							adlast.Make_TypeRef_primitive(
								"Vector",
							),
							[]adlast.TypeExpr{
								adlast.MakeAll_TypeExpr(
									adlast.Make_TypeRef_reference(
										adlast.MakeAll_ScopedName(
											"test31.test31",
											"Struct02Test",
										),
									),
									[]adlast.TypeExpr{},
								),
							},
						),
						types.Make_Maybe_nothing[any](),
						customtypes.MapMap[adlast.ScopedName, any]{},
					),
				},
			),
		),
		customtypes.MapMap[adlast.ScopedName, any]{},
	)
	return adlast.Make_ScopedDecl("test31.test31", decl)
}

func init() {
	goadl.RESOLVER.Register(
		adlast.Make_ScopedName("test31.test31", "VectorTest"),
		AST_VectorTest(),
	)
}

func Texpr_VoidTest() adlast.ATypeExpr[VoidTest] {
	te := adlast.Make_TypeExpr(
		adlast.Make_TypeRef_reference(
			adlast.Make_ScopedName("test31.test31", "VoidTest"),
		),
		[]adlast.TypeExpr{},
	)
	return adlast.Make_ATypeExpr[VoidTest](te)
}

func AST_VoidTest() adlast.ScopedDecl {
	decl := adlast.MakeAll_Decl(
		"VoidTest",
		types.Make_Maybe_nothing[uint32](),
		adlast.Make_DeclType_union_(
			adlast.MakeAll_Union(
				[]adlast.Ident{},
				[]adlast.Field{
					adlast.MakeAll_Field(
						"abc",
						"abc",
						adlast.MakeAll_TypeExpr(
							adlast.Make_TypeRef_primitive(
								"Void",
							),
							[]adlast.TypeExpr{},
						),
						types.Make_Maybe_nothing[any](),
						customtypes.MapMap[adlast.ScopedName, any]{adlast.Make_ScopedName("sys.annotations", "TypeDiscrimination"): map[string]interface{}{"@v": 0}},
					),
					adlast.MakeAll_Field(
						"def",
						"def",
						adlast.MakeAll_TypeExpr(
							adlast.Make_TypeRef_reference(
								adlast.MakeAll_ScopedName(
									"test31.test31",
									"S1",
								),
							),
							[]adlast.TypeExpr{},
						),
						types.Make_Maybe_nothing[any](),
						customtypes.MapMap[adlast.ScopedName, any]{},
					),
				},
			),
		),
		customtypes.MapMap[adlast.ScopedName, any]{},
	)
	return adlast.Make_ScopedDecl("test31.test31", decl)
}

func init() {
	goadl.RESOLVER.Register(
		adlast.Make_ScopedName("test31.test31", "VoidTest"),
		AST_VoidTest(),
	)
}
