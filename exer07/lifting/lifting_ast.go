// Code generated by goadlc v3 - DO NOT EDIT.
package lifting

import (
	goadl "github.com/adl-lang/goadl_rt/v3"
	"github.com/adl-lang/goadl_rt/v3/customtypes"
	"github.com/adl-lang/goadl_rt/v3/sys/adlast"
	"github.com/adl-lang/goadl_rt/v3/sys/types"
)

func Texpr_AddedField() adlast.ATypeExpr[AddedField] {
	te := adlast.Make_TypeExpr(
		adlast.Make_TypeRef_reference(
			adlast.Make_ScopedName("exer07.lifting", "AddedField"),
		),
		[]adlast.TypeExpr{},
	)
	return adlast.Make_ATypeExpr[AddedField](te)
}

func AST_AddedField() adlast.ScopedDecl {
	decl := adlast.MakeAll_Decl(
		"AddedField",
		types.Make_Maybe_nothing[uint32](),
		adlast.Make_DeclType_struct_(
			adlast.MakeAll_Struct(
				[]adlast.Ident{},
				[]adlast.Field{
					adlast.MakeAll_Field(
						"quantity",
						"quantity",
						adlast.MakeAll_TypeExpr(
							adlast.Make_TypeRef_primitive(
								"Double",
							),
							[]adlast.TypeExpr{},
						),
						types.Make_Maybe_nothing[any](),
						customtypes.MapMap[adlast.ScopedName, any]{},
					),
					adlast.MakeAll_Field(
						"value",
						"value",
						adlast.MakeAll_TypeExpr(
							adlast.Make_TypeRef_primitive(
								"Int64",
							),
							[]adlast.TypeExpr{},
						),
						types.Make_Maybe_nothing[any](),
						customtypes.MapMap[adlast.ScopedName, any]{},
					),
				},
			),
		),
		customtypes.MapMap[adlast.ScopedName, any]{},
	)
	return adlast.Make_ScopedDecl("exer07.lifting", decl)
}

func init() {
	goadl.RESOLVER.Register(
		adlast.Make_ScopedName("exer07.lifting", "AddedField"),
		AST_AddedField(),
	)
}

func Texpr_Lifted() adlast.ATypeExpr[Lifted] {
	te := adlast.Make_TypeExpr(
		adlast.Make_TypeRef_reference(
			adlast.Make_ScopedName("exer07.lifting", "Lifted"),
		),
		[]adlast.TypeExpr{},
	)
	return adlast.Make_ATypeExpr[Lifted](te)
}

func AST_Lifted() adlast.ScopedDecl {
	decl := adlast.MakeAll_Decl(
		"Lifted",
		types.Make_Maybe_nothing[uint32](),
		adlast.Make_DeclType_union_(
			adlast.MakeAll_Union(
				[]adlast.Ident{},
				[]adlast.Field{
					adlast.MakeAll_Field(
						"org_field",
						"org_field",
						adlast.MakeAll_TypeExpr(
							adlast.Make_TypeRef_reference(
								adlast.MakeAll_ScopedName(
									"exer07.lifting",
									"OrgField",
								),
							),
							[]adlast.TypeExpr{},
						),
						types.Make_Maybe_nothing[any](),
						customtypes.MapMap[adlast.ScopedName, any]{},
					),
					adlast.MakeAll_Field(
						"option2",
						"option2",
						adlast.MakeAll_TypeExpr(
							adlast.Make_TypeRef_reference(
								adlast.MakeAll_ScopedName(
									"exer07.lifting",
									"AddedField",
								),
							),
							[]adlast.TypeExpr{},
						),
						types.Make_Maybe_nothing[any](),
						customtypes.MapMap[adlast.ScopedName, any]{},
					),
				},
			),
		),
		customtypes.MapMap[adlast.ScopedName, any]{adlast.Make_ScopedName("sys.annotations", "AllowUntaggedDeserializeOfFirstBranch"): nil},
	)
	return adlast.Make_ScopedDecl("exer07.lifting", decl)
}

func init() {
	goadl.RESOLVER.Register(
		adlast.Make_ScopedName("exer07.lifting", "Lifted"),
		AST_Lifted(),
	)
}

func Texpr_LiftedVector() adlast.ATypeExpr[LiftedVector] {
	te := adlast.Make_TypeExpr(
		adlast.Make_TypeRef_reference(
			adlast.Make_ScopedName("exer07.lifting", "LiftedVector"),
		),
		[]adlast.TypeExpr{},
	)
	return adlast.Make_ATypeExpr[LiftedVector](te)
}

func AST_LiftedVector() adlast.ScopedDecl {
	decl := adlast.MakeAll_Decl(
		"LiftedVector",
		types.Make_Maybe_nothing[uint32](),
		adlast.Make_DeclType_union_(
			adlast.MakeAll_Union(
				[]adlast.Ident{},
				[]adlast.Field{
					adlast.MakeAll_Field(
						"str_arr",
						"str_arr",
						adlast.MakeAll_TypeExpr(
							adlast.Make_TypeRef_primitive(
								"Vector",
							),
							[]adlast.TypeExpr{
								adlast.MakeAll_TypeExpr(
									adlast.Make_TypeRef_primitive(
										"String",
									),
									[]adlast.TypeExpr{},
								),
							},
						),
						types.Make_Maybe_nothing[any](),
						customtypes.MapMap[adlast.ScopedName, any]{},
					),
					adlast.MakeAll_Field(
						"count_strs",
						"count_strs",
						adlast.MakeAll_TypeExpr(
							adlast.Make_TypeRef_reference(
								adlast.MakeAll_ScopedName(
									"sys.types",
									"Pair",
								),
							),
							[]adlast.TypeExpr{
								adlast.MakeAll_TypeExpr(
									adlast.Make_TypeRef_primitive(
										"Int64",
									),
									[]adlast.TypeExpr{},
								),
								adlast.MakeAll_TypeExpr(
									adlast.Make_TypeRef_primitive(
										"Vector",
									),
									[]adlast.TypeExpr{
										adlast.MakeAll_TypeExpr(
											adlast.Make_TypeRef_primitive(
												"String",
											),
											[]adlast.TypeExpr{},
										),
									},
								),
							},
						),
						types.Make_Maybe_nothing[any](),
						customtypes.MapMap[adlast.ScopedName, any]{},
					),
				},
			),
		),
		customtypes.MapMap[adlast.ScopedName, any]{adlast.Make_ScopedName("sys.annotations", "AllowUntaggedDeserializeOfFirstBranch"): nil},
	)
	return adlast.Make_ScopedDecl("exer07.lifting", decl)
}

func init() {
	goadl.RESOLVER.Register(
		adlast.Make_ScopedName("exer07.lifting", "LiftedVector"),
		AST_LiftedVector(),
	)
}

func Texpr_NewOutter() adlast.ATypeExpr[NewOutter] {
	te := adlast.Make_TypeExpr(
		adlast.Make_TypeRef_reference(
			adlast.Make_ScopedName("exer07.lifting", "NewOutter"),
		),
		[]adlast.TypeExpr{},
	)
	return adlast.Make_ATypeExpr[NewOutter](te)
}

func AST_NewOutter() adlast.ScopedDecl {
	decl := adlast.MakeAll_Decl(
		"NewOutter",
		types.Make_Maybe_nothing[uint32](),
		adlast.Make_DeclType_struct_(
			adlast.MakeAll_Struct(
				[]adlast.Ident{},
				[]adlast.Field{
					adlast.MakeAll_Field(
						"field0",
						"field0",
						adlast.MakeAll_TypeExpr(
							adlast.Make_TypeRef_reference(
								adlast.MakeAll_ScopedName(
									"exer07.lifting",
									"Lifted",
								),
							),
							[]adlast.TypeExpr{},
						),
						types.Make_Maybe_nothing[any](),
						customtypes.MapMap[adlast.ScopedName, any]{},
					),
				},
			),
		),
		customtypes.MapMap[adlast.ScopedName, any]{},
	)
	return adlast.Make_ScopedDecl("exer07.lifting", decl)
}

func init() {
	goadl.RESOLVER.Register(
		adlast.Make_ScopedName("exer07.lifting", "NewOutter"),
		AST_NewOutter(),
	)
}

func Texpr_OldOutter() adlast.ATypeExpr[OldOutter] {
	te := adlast.Make_TypeExpr(
		adlast.Make_TypeRef_reference(
			adlast.Make_ScopedName("exer07.lifting", "OldOutter"),
		),
		[]adlast.TypeExpr{},
	)
	return adlast.Make_ATypeExpr[OldOutter](te)
}

func AST_OldOutter() adlast.ScopedDecl {
	decl := adlast.MakeAll_Decl(
		"OldOutter",
		types.Make_Maybe_nothing[uint32](),
		adlast.Make_DeclType_struct_(
			adlast.MakeAll_Struct(
				[]adlast.Ident{},
				[]adlast.Field{
					adlast.MakeAll_Field(
						"field0",
						"field0",
						adlast.MakeAll_TypeExpr(
							adlast.Make_TypeRef_reference(
								adlast.MakeAll_ScopedName(
									"exer07.lifting",
									"OrgField",
								),
							),
							[]adlast.TypeExpr{},
						),
						types.Make_Maybe_nothing[any](),
						customtypes.MapMap[adlast.ScopedName, any]{},
					),
				},
			),
		),
		customtypes.MapMap[adlast.ScopedName, any]{},
	)
	return adlast.Make_ScopedDecl("exer07.lifting", decl)
}

func init() {
	goadl.RESOLVER.Register(
		adlast.Make_ScopedName("exer07.lifting", "OldOutter"),
		AST_OldOutter(),
	)
}

func Texpr_OrgField() adlast.ATypeExpr[OrgField] {
	te := adlast.Make_TypeExpr(
		adlast.Make_TypeRef_reference(
			adlast.Make_ScopedName("exer07.lifting", "OrgField"),
		),
		[]adlast.TypeExpr{},
	)
	return adlast.Make_ATypeExpr[OrgField](te)
}

func AST_OrgField() adlast.ScopedDecl {
	decl := adlast.MakeAll_Decl(
		"OrgField",
		types.Make_Maybe_nothing[uint32](),
		adlast.Make_DeclType_struct_(
			adlast.MakeAll_Struct(
				[]adlast.Ident{},
				[]adlast.Field{
					adlast.MakeAll_Field(
						"a",
						"a",
						adlast.MakeAll_TypeExpr(
							adlast.Make_TypeRef_primitive(
								"String",
							),
							[]adlast.TypeExpr{},
						),
						types.Make_Maybe_nothing[any](),
						customtypes.MapMap[adlast.ScopedName, any]{},
					),
					adlast.MakeAll_Field(
						"b",
						"b",
						adlast.MakeAll_TypeExpr(
							adlast.Make_TypeRef_primitive(
								"Int64",
							),
							[]adlast.TypeExpr{},
						),
						types.Make_Maybe_nothing[any](),
						customtypes.MapMap[adlast.ScopedName, any]{},
					),
				},
			),
		),
		customtypes.MapMap[adlast.ScopedName, any]{},
	)
	return adlast.Make_ScopedDecl("exer07.lifting", decl)
}

func init() {
	goadl.RESOLVER.Register(
		adlast.Make_ScopedName("exer07.lifting", "OrgField"),
		AST_OrgField(),
	)
}
